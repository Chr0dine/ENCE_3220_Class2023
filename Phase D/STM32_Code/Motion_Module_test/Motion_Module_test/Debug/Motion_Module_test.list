
Motion_Module_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009638  08009638  00019638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009654  08009654  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800965c  0800965c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800965c  0800965c  0001965c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009660  08009660  00019660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000083c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008cc  200008cc  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001864f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037ee  00000000  00000000  0003870f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001260  00000000  00000000  0003d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244f4  00000000  00000000  0003e530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193f2  00000000  00000000  00062a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d132b  00000000  00000000  0007be16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d141  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056d4  00000000  00000000  0014d194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009620 	.word	0x08009620

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009620 	.word	0x08009620

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_uldivmod>:
 8000540:	b953      	cbnz	r3, 8000558 <__aeabi_uldivmod+0x18>
 8000542:	b94a      	cbnz	r2, 8000558 <__aeabi_uldivmod+0x18>
 8000544:	2900      	cmp	r1, #0
 8000546:	bf08      	it	eq
 8000548:	2800      	cmpeq	r0, #0
 800054a:	bf1c      	itt	ne
 800054c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000550:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000554:	f000 b974 	b.w	8000840 <__aeabi_idiv0>
 8000558:	f1ad 0c08 	sub.w	ip, sp, #8
 800055c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000560:	f000 f806 	bl	8000570 <__udivmoddi4>
 8000564:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800056c:	b004      	add	sp, #16
 800056e:	4770      	bx	lr

08000570 <__udivmoddi4>:
 8000570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000574:	9d08      	ldr	r5, [sp, #32]
 8000576:	4604      	mov	r4, r0
 8000578:	468e      	mov	lr, r1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d14d      	bne.n	800061a <__udivmoddi4+0xaa>
 800057e:	428a      	cmp	r2, r1
 8000580:	4694      	mov	ip, r2
 8000582:	d969      	bls.n	8000658 <__udivmoddi4+0xe8>
 8000584:	fab2 f282 	clz	r2, r2
 8000588:	b152      	cbz	r2, 80005a0 <__udivmoddi4+0x30>
 800058a:	fa01 f302 	lsl.w	r3, r1, r2
 800058e:	f1c2 0120 	rsb	r1, r2, #32
 8000592:	fa20 f101 	lsr.w	r1, r0, r1
 8000596:	fa0c fc02 	lsl.w	ip, ip, r2
 800059a:	ea41 0e03 	orr.w	lr, r1, r3
 800059e:	4094      	lsls	r4, r2
 80005a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005a4:	0c21      	lsrs	r1, r4, #16
 80005a6:	fbbe f6f8 	udiv	r6, lr, r8
 80005aa:	fa1f f78c 	uxth.w	r7, ip
 80005ae:	fb08 e316 	mls	r3, r8, r6, lr
 80005b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80005b6:	fb06 f107 	mul.w	r1, r6, r7
 80005ba:	4299      	cmp	r1, r3
 80005bc:	d90a      	bls.n	80005d4 <__udivmoddi4+0x64>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80005c6:	f080 811f 	bcs.w	8000808 <__udivmoddi4+0x298>
 80005ca:	4299      	cmp	r1, r3
 80005cc:	f240 811c 	bls.w	8000808 <__udivmoddi4+0x298>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	1a5b      	subs	r3, r3, r1
 80005d6:	b2a4      	uxth	r4, r4
 80005d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80005dc:	fb08 3310 	mls	r3, r8, r0, r3
 80005e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005e4:	fb00 f707 	mul.w	r7, r0, r7
 80005e8:	42a7      	cmp	r7, r4
 80005ea:	d90a      	bls.n	8000602 <__udivmoddi4+0x92>
 80005ec:	eb1c 0404 	adds.w	r4, ip, r4
 80005f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80005f4:	f080 810a 	bcs.w	800080c <__udivmoddi4+0x29c>
 80005f8:	42a7      	cmp	r7, r4
 80005fa:	f240 8107 	bls.w	800080c <__udivmoddi4+0x29c>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000606:	1be4      	subs	r4, r4, r7
 8000608:	2600      	movs	r6, #0
 800060a:	b11d      	cbz	r5, 8000614 <__udivmoddi4+0xa4>
 800060c:	40d4      	lsrs	r4, r2
 800060e:	2300      	movs	r3, #0
 8000610:	e9c5 4300 	strd	r4, r3, [r5]
 8000614:	4631      	mov	r1, r6
 8000616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061a:	428b      	cmp	r3, r1
 800061c:	d909      	bls.n	8000632 <__udivmoddi4+0xc2>
 800061e:	2d00      	cmp	r5, #0
 8000620:	f000 80ef 	beq.w	8000802 <__udivmoddi4+0x292>
 8000624:	2600      	movs	r6, #0
 8000626:	e9c5 0100 	strd	r0, r1, [r5]
 800062a:	4630      	mov	r0, r6
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	fab3 f683 	clz	r6, r3
 8000636:	2e00      	cmp	r6, #0
 8000638:	d14a      	bne.n	80006d0 <__udivmoddi4+0x160>
 800063a:	428b      	cmp	r3, r1
 800063c:	d302      	bcc.n	8000644 <__udivmoddi4+0xd4>
 800063e:	4282      	cmp	r2, r0
 8000640:	f200 80f9 	bhi.w	8000836 <__udivmoddi4+0x2c6>
 8000644:	1a84      	subs	r4, r0, r2
 8000646:	eb61 0303 	sbc.w	r3, r1, r3
 800064a:	2001      	movs	r0, #1
 800064c:	469e      	mov	lr, r3
 800064e:	2d00      	cmp	r5, #0
 8000650:	d0e0      	beq.n	8000614 <__udivmoddi4+0xa4>
 8000652:	e9c5 4e00 	strd	r4, lr, [r5]
 8000656:	e7dd      	b.n	8000614 <__udivmoddi4+0xa4>
 8000658:	b902      	cbnz	r2, 800065c <__udivmoddi4+0xec>
 800065a:	deff      	udf	#255	; 0xff
 800065c:	fab2 f282 	clz	r2, r2
 8000660:	2a00      	cmp	r2, #0
 8000662:	f040 8092 	bne.w	800078a <__udivmoddi4+0x21a>
 8000666:	eba1 010c 	sub.w	r1, r1, ip
 800066a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800066e:	fa1f fe8c 	uxth.w	lr, ip
 8000672:	2601      	movs	r6, #1
 8000674:	0c20      	lsrs	r0, r4, #16
 8000676:	fbb1 f3f7 	udiv	r3, r1, r7
 800067a:	fb07 1113 	mls	r1, r7, r3, r1
 800067e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000682:	fb0e f003 	mul.w	r0, lr, r3
 8000686:	4288      	cmp	r0, r1
 8000688:	d908      	bls.n	800069c <__udivmoddi4+0x12c>
 800068a:	eb1c 0101 	adds.w	r1, ip, r1
 800068e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000692:	d202      	bcs.n	800069a <__udivmoddi4+0x12a>
 8000694:	4288      	cmp	r0, r1
 8000696:	f200 80cb 	bhi.w	8000830 <__udivmoddi4+0x2c0>
 800069a:	4643      	mov	r3, r8
 800069c:	1a09      	subs	r1, r1, r0
 800069e:	b2a4      	uxth	r4, r4
 80006a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006a4:	fb07 1110 	mls	r1, r7, r0, r1
 80006a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006ac:	fb0e fe00 	mul.w	lr, lr, r0
 80006b0:	45a6      	cmp	lr, r4
 80006b2:	d908      	bls.n	80006c6 <__udivmoddi4+0x156>
 80006b4:	eb1c 0404 	adds.w	r4, ip, r4
 80006b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80006bc:	d202      	bcs.n	80006c4 <__udivmoddi4+0x154>
 80006be:	45a6      	cmp	lr, r4
 80006c0:	f200 80bb 	bhi.w	800083a <__udivmoddi4+0x2ca>
 80006c4:	4608      	mov	r0, r1
 80006c6:	eba4 040e 	sub.w	r4, r4, lr
 80006ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80006ce:	e79c      	b.n	800060a <__udivmoddi4+0x9a>
 80006d0:	f1c6 0720 	rsb	r7, r6, #32
 80006d4:	40b3      	lsls	r3, r6
 80006d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006da:	ea4c 0c03 	orr.w	ip, ip, r3
 80006de:	fa20 f407 	lsr.w	r4, r0, r7
 80006e2:	fa01 f306 	lsl.w	r3, r1, r6
 80006e6:	431c      	orrs	r4, r3
 80006e8:	40f9      	lsrs	r1, r7
 80006ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006ee:	fa00 f306 	lsl.w	r3, r0, r6
 80006f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80006f6:	0c20      	lsrs	r0, r4, #16
 80006f8:	fa1f fe8c 	uxth.w	lr, ip
 80006fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000700:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000704:	fb08 f00e 	mul.w	r0, r8, lr
 8000708:	4288      	cmp	r0, r1
 800070a:	fa02 f206 	lsl.w	r2, r2, r6
 800070e:	d90b      	bls.n	8000728 <__udivmoddi4+0x1b8>
 8000710:	eb1c 0101 	adds.w	r1, ip, r1
 8000714:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000718:	f080 8088 	bcs.w	800082c <__udivmoddi4+0x2bc>
 800071c:	4288      	cmp	r0, r1
 800071e:	f240 8085 	bls.w	800082c <__udivmoddi4+0x2bc>
 8000722:	f1a8 0802 	sub.w	r8, r8, #2
 8000726:	4461      	add	r1, ip
 8000728:	1a09      	subs	r1, r1, r0
 800072a:	b2a4      	uxth	r4, r4
 800072c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000730:	fb09 1110 	mls	r1, r9, r0, r1
 8000734:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000738:	fb00 fe0e 	mul.w	lr, r0, lr
 800073c:	458e      	cmp	lr, r1
 800073e:	d908      	bls.n	8000752 <__udivmoddi4+0x1e2>
 8000740:	eb1c 0101 	adds.w	r1, ip, r1
 8000744:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000748:	d26c      	bcs.n	8000824 <__udivmoddi4+0x2b4>
 800074a:	458e      	cmp	lr, r1
 800074c:	d96a      	bls.n	8000824 <__udivmoddi4+0x2b4>
 800074e:	3802      	subs	r0, #2
 8000750:	4461      	add	r1, ip
 8000752:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000756:	fba0 9402 	umull	r9, r4, r0, r2
 800075a:	eba1 010e 	sub.w	r1, r1, lr
 800075e:	42a1      	cmp	r1, r4
 8000760:	46c8      	mov	r8, r9
 8000762:	46a6      	mov	lr, r4
 8000764:	d356      	bcc.n	8000814 <__udivmoddi4+0x2a4>
 8000766:	d053      	beq.n	8000810 <__udivmoddi4+0x2a0>
 8000768:	b15d      	cbz	r5, 8000782 <__udivmoddi4+0x212>
 800076a:	ebb3 0208 	subs.w	r2, r3, r8
 800076e:	eb61 010e 	sbc.w	r1, r1, lr
 8000772:	fa01 f707 	lsl.w	r7, r1, r7
 8000776:	fa22 f306 	lsr.w	r3, r2, r6
 800077a:	40f1      	lsrs	r1, r6
 800077c:	431f      	orrs	r7, r3
 800077e:	e9c5 7100 	strd	r7, r1, [r5]
 8000782:	2600      	movs	r6, #0
 8000784:	4631      	mov	r1, r6
 8000786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078a:	f1c2 0320 	rsb	r3, r2, #32
 800078e:	40d8      	lsrs	r0, r3
 8000790:	fa0c fc02 	lsl.w	ip, ip, r2
 8000794:	fa21 f303 	lsr.w	r3, r1, r3
 8000798:	4091      	lsls	r1, r2
 800079a:	4301      	orrs	r1, r0
 800079c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007a0:	fa1f fe8c 	uxth.w	lr, ip
 80007a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007a8:	fb07 3610 	mls	r6, r7, r0, r3
 80007ac:	0c0b      	lsrs	r3, r1, #16
 80007ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80007b2:	fb00 f60e 	mul.w	r6, r0, lr
 80007b6:	429e      	cmp	r6, r3
 80007b8:	fa04 f402 	lsl.w	r4, r4, r2
 80007bc:	d908      	bls.n	80007d0 <__udivmoddi4+0x260>
 80007be:	eb1c 0303 	adds.w	r3, ip, r3
 80007c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80007c6:	d22f      	bcs.n	8000828 <__udivmoddi4+0x2b8>
 80007c8:	429e      	cmp	r6, r3
 80007ca:	d92d      	bls.n	8000828 <__udivmoddi4+0x2b8>
 80007cc:	3802      	subs	r0, #2
 80007ce:	4463      	add	r3, ip
 80007d0:	1b9b      	subs	r3, r3, r6
 80007d2:	b289      	uxth	r1, r1
 80007d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80007d8:	fb07 3316 	mls	r3, r7, r6, r3
 80007dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007e0:	fb06 f30e 	mul.w	r3, r6, lr
 80007e4:	428b      	cmp	r3, r1
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x28a>
 80007e8:	eb1c 0101 	adds.w	r1, ip, r1
 80007ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80007f0:	d216      	bcs.n	8000820 <__udivmoddi4+0x2b0>
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d914      	bls.n	8000820 <__udivmoddi4+0x2b0>
 80007f6:	3e02      	subs	r6, #2
 80007f8:	4461      	add	r1, ip
 80007fa:	1ac9      	subs	r1, r1, r3
 80007fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000800:	e738      	b.n	8000674 <__udivmoddi4+0x104>
 8000802:	462e      	mov	r6, r5
 8000804:	4628      	mov	r0, r5
 8000806:	e705      	b.n	8000614 <__udivmoddi4+0xa4>
 8000808:	4606      	mov	r6, r0
 800080a:	e6e3      	b.n	80005d4 <__udivmoddi4+0x64>
 800080c:	4618      	mov	r0, r3
 800080e:	e6f8      	b.n	8000602 <__udivmoddi4+0x92>
 8000810:	454b      	cmp	r3, r9
 8000812:	d2a9      	bcs.n	8000768 <__udivmoddi4+0x1f8>
 8000814:	ebb9 0802 	subs.w	r8, r9, r2
 8000818:	eb64 0e0c 	sbc.w	lr, r4, ip
 800081c:	3801      	subs	r0, #1
 800081e:	e7a3      	b.n	8000768 <__udivmoddi4+0x1f8>
 8000820:	4646      	mov	r6, r8
 8000822:	e7ea      	b.n	80007fa <__udivmoddi4+0x28a>
 8000824:	4620      	mov	r0, r4
 8000826:	e794      	b.n	8000752 <__udivmoddi4+0x1e2>
 8000828:	4640      	mov	r0, r8
 800082a:	e7d1      	b.n	80007d0 <__udivmoddi4+0x260>
 800082c:	46d0      	mov	r8, sl
 800082e:	e77b      	b.n	8000728 <__udivmoddi4+0x1b8>
 8000830:	3b02      	subs	r3, #2
 8000832:	4461      	add	r1, ip
 8000834:	e732      	b.n	800069c <__udivmoddi4+0x12c>
 8000836:	4630      	mov	r0, r6
 8000838:	e709      	b.n	800064e <__udivmoddi4+0xde>
 800083a:	4464      	add	r4, ip
 800083c:	3802      	subs	r0, #2
 800083e:	e742      	b.n	80006c6 <__udivmoddi4+0x156>

08000840 <__aeabi_idiv0>:
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 800084c:	2254      	movs	r2, #84	; 0x54
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <MPU6050_Init+0x1c>)
 8000852:	f008 fdd1 	bl	80093f8 <memcpy>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000ac 	.word	0x200000ac

08000864 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8000874:	23d0      	movs	r3, #208	; 0xd0
 8000876:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	b299      	uxth	r1, r3
 8000880:	f107 020c 	add.w	r2, r7, #12
 8000884:	230a      	movs	r3, #10
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2301      	movs	r3, #1
 800088a:	4808      	ldr	r0, [pc, #32]	; (80008ac <I2C_Read+0x48>)
 800088c:	f002 ff86 	bl	800379c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	b299      	uxth	r1, r3
 8000894:	79bb      	ldrb	r3, [r7, #6]
 8000896:	b29b      	uxth	r3, r3
 8000898:	2264      	movs	r2, #100	; 0x64
 800089a:	9200      	str	r2, [sp, #0]
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	4803      	ldr	r0, [pc, #12]	; (80008ac <I2C_Read+0x48>)
 80008a0:	f003 f87a 	bl	8003998 <HAL_I2C_Master_Receive>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000ac 	.word	0x200000ac

080008b0 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 80008c8:	23d0      	movs	r3, #208	; 0xd0
 80008ca:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	b299      	uxth	r1, r3
 80008d0:	f107 020c 	add.w	r2, r7, #12
 80008d4:	2364      	movs	r3, #100	; 0x64
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2302      	movs	r3, #2
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <I2C_Write8+0x38>)
 80008dc:	f002 ff5e 	bl	800379c <HAL_I2C_Master_Transmit>
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000ac 	.word	0x200000ac

080008ec <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	206b      	movs	r0, #107	; 0x6b
 80008fc:	f7ff ffd8 	bl	80008b0 <I2C_Write8>
	HAL_Delay(100);
 8000900:	2064      	movs	r0, #100	; 0x64
 8000902:	f000 fecb 	bl	800169c <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	b25b      	sxtb	r3, r3
 8000918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091c:	b25a      	sxtb	r2, r3
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	4313      	orrs	r3, r2
 8000924:	b25b      	sxtb	r3, r3
 8000926:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	4619      	mov	r1, r3
 800092c:	206b      	movs	r0, #107	; 0x6b
 800092e:	f7ff ffbf 	bl	80008b0 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8000932:	2064      	movs	r0, #100	; 0x64
 8000934:	f000 feb2 	bl	800169c <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	78db      	ldrb	r3, [r3, #3]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	4619      	mov	r1, r3
 800094a:	201a      	movs	r0, #26
 800094c:	f7ff ffb0 	bl	80008b0 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	785b      	ldrb	r3, [r3, #1]
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f003 0318 	and.w	r3, r3, #24
 8000960:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	4619      	mov	r1, r3
 8000966:	201b      	movs	r0, #27
 8000968:	f7ff ffa2 	bl	80008b0 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	789b      	ldrb	r3, [r3, #2]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	f003 0318 	and.w	r3, r3, #24
 800097c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	4619      	mov	r1, r3
 8000982:	201c      	movs	r0, #28
 8000984:	f7ff ff94 	bl	80008b0 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8000988:	2004      	movs	r0, #4
 800098a:	f000 f857 	bl	8000a3c <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d81a      	bhi.n	80009cc <MPU6050_Config+0xe0>
 8000996:	a201      	add	r2, pc, #4	; (adr r2, 800099c <MPU6050_Config+0xb0>)
 8000998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099c:	080009ad 	.word	0x080009ad
 80009a0:	080009b5 	.word	0x080009b5
 80009a4:	080009bd 	.word	0x080009bd
 80009a8:	080009c5 	.word	0x080009c5
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MPU6050_Config+0x12c>)
 80009ae:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <MPU6050_Config+0x130>)
 80009b0:	601a      	str	r2, [r3, #0]
			break;
 80009b2:	e00c      	b.n	80009ce <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MPU6050_Config+0x12c>)
 80009b6:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <MPU6050_Config+0x134>)
 80009b8:	601a      	str	r2, [r3, #0]
				break;
 80009ba:	e008      	b.n	80009ce <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MPU6050_Config+0x12c>)
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <MPU6050_Config+0x138>)
 80009c0:	601a      	str	r2, [r3, #0]
			break;
 80009c2:	e004      	b.n	80009ce <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MPU6050_Config+0x12c>)
 80009c6:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <MPU6050_Config+0x13c>)
 80009c8:	601a      	str	r2, [r3, #0]
			break;
 80009ca:	e000      	b.n	80009ce <MPU6050_Config+0xe2>
		
		default:
			break;
 80009cc:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	785b      	ldrb	r3, [r3, #1]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d81a      	bhi.n	8000a0c <MPU6050_Config+0x120>
 80009d6:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <MPU6050_Config+0xf0>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	080009f5 	.word	0x080009f5
 80009e4:	080009fd 	.word	0x080009fd
 80009e8:	08000a05 	.word	0x08000a05
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MPU6050_Config+0x140>)
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <MPU6050_Config+0x144>)
 80009f0:	601a      	str	r2, [r3, #0]
			break;
 80009f2:	e00c      	b.n	8000a0e <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MPU6050_Config+0x140>)
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <MPU6050_Config+0x148>)
 80009f8:	601a      	str	r2, [r3, #0]
				break;
 80009fa:	e008      	b.n	8000a0e <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MPU6050_Config+0x140>)
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <MPU6050_Config+0x14c>)
 8000a00:	601a      	str	r2, [r3, #0]
			break;
 8000a02:	e004      	b.n	8000a0e <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MPU6050_Config+0x140>)
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <MPU6050_Config+0x130>)
 8000a08:	601a      	str	r2, [r3, #0]
			break;
 8000a0a:	e000      	b.n	8000a0e <MPU6050_Config+0x122>
		
		default:
			break;
 8000a0c:	bf00      	nop
	}
	
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000100 	.word	0x20000100
 8000a1c:	3d7a0000 	.word	0x3d7a0000
 8000a20:	3dfa0000 	.word	0x3dfa0000
 8000a24:	3e7a0000 	.word	0x3e7a0000
 8000a28:	3efa0000 	.word	0x3efa0000
 8000a2c:	20000104 	.word	0x20000104
 8000a30:	3bfa0000 	.word	0x3bfa0000
 8000a34:	3c7a0000 	.word	0x3c7a0000
 8000a38:	3cfa0000 	.word	0x3cfa0000

08000a3c <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2019      	movs	r0, #25
 8000a4c:	f7ff ff30 	bl	80008b0 <I2C_Write8>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	3301      	adds	r3, #1
 8000a66:	2201      	movs	r2, #1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	203a      	movs	r0, #58	; 0x3a
 8000a6c:	f7ff fefa 	bl	8000864 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8000a70:	7f7b      	ldrb	r3, [r7, #29]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d04f      	beq.n	8000b16 <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2206      	movs	r2, #6
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	203b      	movs	r0, #59	; 0x3b
 8000a80:	f7ff fef0 	bl	8000864 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8000a84:	7d3b      	ldrb	r3, [r7, #20]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	7d7b      	ldrb	r3, [r7, #21]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4413      	add	r3, r2
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8000a9a:	7dbb      	ldrb	r3, [r7, #22]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8000ab0:	7e3b      	ldrb	r3, [r7, #24]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	7e7b      	ldrb	r3, [r7, #25]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4413      	add	r3, r2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b21a      	sxth	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2206      	movs	r2, #6
 8000acc:	4619      	mov	r1, r3
 8000ace:	2043      	movs	r0, #67	; 0x43
 8000ad0:	f7ff fec8 	bl	8000864 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8000ad4:	7b3b      	ldrb	r3, [r7, #12]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	7b7b      	ldrb	r3, [r7, #13]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	4413      	add	r3, r2
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MPU6050_Get_Accel_RawData+0xc8>)
 8000ae8:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	021b      	lsls	r3, r3, #8
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b21a      	sxth	r2, r3
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MPU6050_Get_Accel_RawData+0xc8>)
 8000afe:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8000b00:	7c3b      	ldrb	r3, [r7, #16]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	7c7b      	ldrb	r3, [r7, #17]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <MPU6050_Get_Accel_RawData+0xc8>)
 8000b14:	809a      	strh	r2, [r3, #4]
	}
}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000108 	.word	0x20000108

08000b24 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff91 	bl	8000a58 <MPU6050_Get_Accel_RawData>
	
	//Accel Scale data 
	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
 8000b36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b3a:	ee07 3a90 	vmov	s15, r3
 8000b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b42:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000bac <MPU6050_Get_Accel_Scale+0x88>
 8000b46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MPU6050_Get_Accel_Scale+0x8c>)
 8000b4c:	edd3 7a00 	vldr	s15, [r3]
 8000b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
 8000b5a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b66:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000bac <MPU6050_Get_Accel_Scale+0x88>
 8000b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MPU6050_Get_Accel_Scale+0x8c>)
 8000b70:	edd3 7a00 	vldr	s15, [r3]
 8000b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
 8000b7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b82:	ee07 3a90 	vmov	s15, r3
 8000b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b8a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000bac <MPU6050_Get_Accel_Scale+0x88>
 8000b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MPU6050_Get_Accel_Scale+0x8c>)
 8000b94:	edd3 7a00 	vldr	s15, [r3]
 8000b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	00000000 	.word	0x00000000
 8000bb0:	20000100 	.word	0x20000100

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bba:	f000 fcfd 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbe:	f000 f865 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc2:	f000 f949 	bl	8000e58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bc6:	f000 f8cb 	bl	8000d60 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 8000bca:	f008 f927 	bl	8008e1c <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000bce:	f000 f8f5 	bl	8000dbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bd2:	4824      	ldr	r0, [pc, #144]	; (8000c64 <main+0xb0>)
 8000bd4:	f005 fccc 	bl	8006570 <HAL_TIM_Base_Start_IT>
	MPU6050_Init(&hi2c1);
 8000bd8:	4823      	ldr	r0, [pc, #140]	; (8000c68 <main+0xb4>)
 8000bda:	f7ff fe33 	bl	8000844 <MPU6050_Init>
	//2. Configure Accel and Gyro parameters
	myMpuConfig.Accel_Full_Scale = AFS_SEL_2g;
 8000bde:	2300      	movs	r3, #0
 8000be0:	70bb      	strb	r3, [r7, #2]
	myMpuConfig.ClockSource = Internal_8MHz;
 8000be2:	2300      	movs	r3, #0
 8000be4:	703b      	strb	r3, [r7, #0]
	myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8000be6:	2301      	movs	r3, #1
 8000be8:	70fb      	strb	r3, [r7, #3]
	myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 8000bea:	2301      	movs	r3, #1
 8000bec:	707b      	strb	r3, [r7, #1]
	myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 8000bee:	2300      	movs	r3, #0
 8000bf0:	713b      	strb	r3, [r7, #4]
	MPU6050_Config(&myMpuConfig);
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fe79 	bl	80008ec <MPU6050_Config>

  /* Infinite loop */
	while(1){
  /* USER CODE BEGIN WHILE */
	  // getAccelAverage();
	  if(gArmFlag==1){
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <main+0xb8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d1fb      	bne.n	8000bfa <main+0x46>
	    getAccelAverage();
 8000c02:	f000 fa83 	bl	800110c <getAccelAverage>
	    	if(!AccelDataEqual()){
 8000c06:	f000 fafd 	bl	8001204 <AccelDataEqual>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f4      	bne.n	8000bfa <main+0x46>
    		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	4816      	ldr	r0, [pc, #88]	; (8000c70 <main+0xbc>)
 8000c16:	f001 f85c 	bl	8001cd2 <HAL_GPIO_TogglePin>
	    		gArmFlag=0;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <main+0xb8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
	    		gXAccelData=0;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <main+0xc0>)
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
	    		gYAccelData=0;
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <main+0xc4>)
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
	    		gZAccelData=0;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <main+0xc8>)
 8000c32:	f04f 0200 	mov.w	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
	    		gTempXAccelData=0;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <main+0xcc>)
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
	    		gTempYAccelData=0;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <main+0xd0>)
 8000c42:	f04f 0200 	mov.w	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
	    		gTempZAccelData=0;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <main+0xd4>)
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
	    		HAL_Delay(5000);
 8000c50:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c54:	f000 fd22 	bl	800169c <HAL_Delay>
	    		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <main+0xbc>)
 8000c5e:	f001 f838 	bl	8001cd2 <HAL_GPIO_TogglePin>
	  if(gArmFlag==1){
 8000c62:	e7ca      	b.n	8000bfa <main+0x46>
 8000c64:	20000164 	.word	0x20000164
 8000c68:	20000110 	.word	0x20000110
 8000c6c:	200001ac 	.word	0x200001ac
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	200001b0 	.word	0x200001b0
 8000c78:	200001b4 	.word	0x200001b4
 8000c7c:	200001b8 	.word	0x200001b8
 8000c80:	200001bc 	.word	0x200001bc
 8000c84:	200001c0 	.word	0x200001c0
 8000c88:	200001c4 	.word	0x200001c4

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	; 0x50
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	2230      	movs	r2, #48	; 0x30
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f008 fbba 	bl	8009414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <SystemClock_Config+0xd0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a21      	ldr	r2, [pc, #132]	; (8000d5c <SystemClock_Config+0xd0>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <SystemClock_Config+0xd0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	4618      	mov	r0, r3
 8000d14:	f004 ff58 	bl	8005bc8 <HAL_RCC_OscConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d1e:	f000 fad3 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d22:	230f      	movs	r3, #15
 8000d24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	2302      	movs	r3, #2
 8000d28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	2105      	movs	r1, #5
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 f9b9 	bl	80060b8 <HAL_RCC_ClockConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d4c:	f000 fabc 	bl	80012c8 <Error_Handler>
  }
}
 8000d50:	bf00      	nop
 8000d52:	3750      	adds	r7, #80	; 0x50
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40007000 	.word	0x40007000

08000d60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <MX_I2C1_Init+0x54>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d6c:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <MX_I2C1_Init+0x58>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d9e:	f002 fbb9 	bl	8003514 <HAL_I2C_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000da8:	f000 fa8e 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000110 	.word	0x20000110
 8000db4:	40005400 	.word	0x40005400
 8000db8:	000186a0 	.word	0x000186a0

08000dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000de6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000df0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000df4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000e04:	f005 fb64 	bl	80064d0 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e0e:	f000 fa5b 	bl	80012c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000e20:	f005 fd1e 	bl	8006860 <HAL_TIM_ConfigClockSource>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e2a:	f000 fa4d 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000e3c:	f005 ff44 	bl	8006cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e46:	f000 fa3f 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000164 	.word	0x20000164

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	4ba0      	ldr	r3, [pc, #640]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a9f      	ldr	r2, [pc, #636]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b9d      	ldr	r3, [pc, #628]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	4b99      	ldr	r3, [pc, #612]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a98      	ldr	r2, [pc, #608]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b96      	ldr	r3, [pc, #600]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a91      	ldr	r2, [pc, #580]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b8b      	ldr	r3, [pc, #556]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a8a      	ldr	r2, [pc, #552]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	4b84      	ldr	r3, [pc, #528]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a83      	ldr	r2, [pc, #524]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b81      	ldr	r3, [pc, #516]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	4b7d      	ldr	r3, [pc, #500]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a7c      	ldr	r2, [pc, #496]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b7a      	ldr	r3, [pc, #488]	; (80010f4 <MX_GPIO_Init+0x29c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2108      	movs	r1, #8
 8000f1a:	4877      	ldr	r0, [pc, #476]	; (80010f8 <MX_GPIO_Init+0x2a0>)
 8000f1c:	f000 fec0 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2101      	movs	r1, #1
 8000f24:	4875      	ldr	r0, [pc, #468]	; (80010fc <MX_GPIO_Init+0x2a4>)
 8000f26:	f000 febb 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f30:	4873      	ldr	r0, [pc, #460]	; (8001100 <MX_GPIO_Init+0x2a8>)
 8000f32:	f000 feb5 	bl	8001ca0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3c:	4871      	ldr	r0, [pc, #452]	; (8001104 <MX_GPIO_Init+0x2ac>)
 8000f3e:	f000 feaf 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f42:	2308      	movs	r3, #8
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4867      	ldr	r0, [pc, #412]	; (80010f8 <MX_GPIO_Init+0x2a0>)
 8000f5a:	f000 fd05 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4861      	ldr	r0, [pc, #388]	; (80010fc <MX_GPIO_Init+0x2a4>)
 8000f76:	f000 fcf7 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4859      	ldr	r0, [pc, #356]	; (80010fc <MX_GPIO_Init+0x2a4>)
 8000f96:	f000 fce7 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f9e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4855      	ldr	r0, [pc, #340]	; (8001104 <MX_GPIO_Init+0x2ac>)
 8000fb0:	f000 fcda 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	484d      	ldr	r0, [pc, #308]	; (8001104 <MX_GPIO_Init+0x2ac>)
 8000fd0:	f000 fcca 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fd4:	23e0      	movs	r3, #224	; 0xe0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4845      	ldr	r0, [pc, #276]	; (8001104 <MX_GPIO_Init+0x2ac>)
 8000ff0:	f000 fcba 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4840      	ldr	r0, [pc, #256]	; (8001108 <MX_GPIO_Init+0x2b0>)
 8001008:	f000 fcae 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800100c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800101e:	2305      	movs	r3, #5
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4837      	ldr	r0, [pc, #220]	; (8001108 <MX_GPIO_Init+0x2b0>)
 800102a:	f000 fc9d 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800102e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001032:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	482e      	ldr	r0, [pc, #184]	; (8001100 <MX_GPIO_Init+0x2a8>)
 8001048:	f000 fc8e 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800104c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800105e:	2306      	movs	r3, #6
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	4824      	ldr	r0, [pc, #144]	; (80010fc <MX_GPIO_Init+0x2a4>)
 800106a:	f000 fc7d 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : Arm_Button_Pin */
  GPIO_InitStruct.Pin = Arm_Button_Pin;
 800106e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001074:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Arm_Button_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	481d      	ldr	r0, [pc, #116]	; (80010fc <MX_GPIO_Init+0x2a4>)
 8001086:	f000 fc6f 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 800108a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	4818      	ldr	r0, [pc, #96]	; (8001104 <MX_GPIO_Init+0x2ac>)
 80010a4:	f000 fc60 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010a8:	2320      	movs	r3, #32
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4811      	ldr	r0, [pc, #68]	; (8001100 <MX_GPIO_Init+0x2a8>)
 80010bc:	f000 fc54 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <MX_GPIO_Init+0x2a0>)
 80010d6:	f000 fc47 	bl	8001968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2017      	movs	r0, #23
 80010e0:	f000 fbdb 	bl	800189a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010e4:	2017      	movs	r0, #23
 80010e6:	f000 fbf4 	bl	80018d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ea:	bf00      	nop
 80010ec:	3730      	adds	r7, #48	; 0x30
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400

0800110c <getAccelAverage>:
//    }
//
//
//}

void getAccelAverage(){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	gTempXAccelData = gXAccelData;
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <getAccelAverage+0xdc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a35      	ldr	r2, [pc, #212]	; (80011ec <getAccelAverage+0xe0>)
 8001118:	6013      	str	r3, [r2, #0]
	gTempYAccelData = gYAccelData;
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <getAccelAverage+0xe4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a35      	ldr	r2, [pc, #212]	; (80011f4 <getAccelAverage+0xe8>)
 8001120:	6013      	str	r3, [r2, #0]
	gTempZAccelData = gZAccelData;
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <getAccelAverage+0xec>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a35      	ldr	r2, [pc, #212]	; (80011fc <getAccelAverage+0xf0>)
 8001128:	6013      	str	r3, [r2, #0]
	gXAccelData = 0;
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <getAccelAverage+0xdc>)
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
	gYAccelData = 0;
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <getAccelAverage+0xe4>)
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
	gZAccelData = 0;
 800113a:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <getAccelAverage+0xec>)
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < BUFFSIZE; i++){
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	e029      	b.n	800119c <getAccelAverage+0x90>
		MPU6050_Get_Accel_Scale(&myAccelScaled);
 8001148:	482d      	ldr	r0, [pc, #180]	; (8001200 <getAccelAverage+0xf4>)
 800114a:	f7ff fceb 	bl	8000b24 <MPU6050_Get_Accel_Scale>
		gXAccelData += myAccelScaled.x;
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <getAccelAverage+0xf4>)
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <getAccelAverage+0xdc>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <getAccelAverage+0xdc>)
 8001160:	edc3 7a00 	vstr	s15, [r3]
		gYAccelData += myAccelScaled.y;
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <getAccelAverage+0xf4>)
 8001166:	ed93 7a01 	vldr	s14, [r3, #4]
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <getAccelAverage+0xe4>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <getAccelAverage+0xe4>)
 8001176:	edc3 7a00 	vstr	s15, [r3]
		gZAccelData += myAccelScaled.z;
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <getAccelAverage+0xf4>)
 800117c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <getAccelAverage+0xec>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <getAccelAverage+0xec>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(10);
 8001190:	200a      	movs	r0, #10
 8001192:	f000 fa83 	bl	800169c <HAL_Delay>
	for(int i = 0; i < BUFFSIZE; i++){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b06      	cmp	r3, #6
 80011a0:	ddd2      	ble.n	8001148 <getAccelAverage+0x3c>
	}
	gXAccelData /= BUFFSIZE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <getAccelAverage+0xdc>)
 80011a4:	ed93 7a00 	vldr	s14, [r3]
 80011a8:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 80011ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <getAccelAverage+0xdc>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
	gYAccelData /= BUFFSIZE;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <getAccelAverage+0xe4>)
 80011b8:	ed93 7a00 	vldr	s14, [r3]
 80011bc:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 80011c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <getAccelAverage+0xe4>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
	gZAccelData /= BUFFSIZE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <getAccelAverage+0xec>)
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 80011d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <getAccelAverage+0xec>)
 80011da:	edc3 7a00 	vstr	s15, [r3]
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001b0 	.word	0x200001b0
 80011ec:	200001bc 	.word	0x200001bc
 80011f0:	200001b4 	.word	0x200001b4
 80011f4:	200001c0 	.word	0x200001c0
 80011f8:	200001b8 	.word	0x200001b8
 80011fc:	200001c4 	.word	0x200001c4
 8001200:	200001c8 	.word	0x200001c8

08001204 <AccelDataEqual>:

int AccelDataEqual(){
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
	char result = 1;
 800120a:	2301      	movs	r3, #1
 800120c:	71fb      	strb	r3, [r7, #7]


	if((abs(abs(gTempYAccelData)-abs(gYAccelData))>=200) && ((gTempXAccelData !=0)&& (gTempYAccelData !=0) && (gTempZAccelData !=0))){
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <AccelDataEqual+0x8c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f93c 	bl	8000490 <__aeabi_f2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	ec43 2b10 	vmov	d0, r2, r3
 8001220:	f008 f8ac 	bl	800937c <abs>
 8001224:	4604      	mov	r4, r0
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <AccelDataEqual+0x90>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f930 	bl	8000490 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	ec43 2b10 	vmov	d0, r2, r3
 8001238:	f008 f8a0 	bl	800937c <abs>
 800123c:	4603      	mov	r3, r0
 800123e:	1ae3      	subs	r3, r4, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfb8      	it	lt
 8001244:	425b      	neglt	r3, r3
 8001246:	2bc7      	cmp	r3, #199	; 0xc7
 8001248:	dd1a      	ble.n	8001280 <AccelDataEqual+0x7c>
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <AccelDataEqual+0x94>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	d012      	beq.n	8001280 <AccelDataEqual+0x7c>
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <AccelDataEqual+0x8c>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001268:	d00a      	beq.n	8001280 <AccelDataEqual+0x7c>
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <AccelDataEqual+0x98>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	d002      	beq.n	8001280 <AccelDataEqual+0x7c>
		result =  0;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	e001      	b.n	8001284 <AccelDataEqual+0x80>
	}else{
		result = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	71fb      	strb	r3, [r7, #7]
	}


	return result;
 8001284:	79fb      	ldrb	r3, [r7, #7]
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop
 8001290:	200001c0 	.word	0x200001c0
 8001294:	200001b4 	.word	0x200001b4
 8001298:	200001bc 	.word	0x200001bc
 800129c:	200001c4 	.word	0x200001c4

080012a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == Arm_Button_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b0:	d102      	bne.n	80012b8 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	gArmFlag = 1;
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
    }
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	200001ac 	.word	0x200001ac

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_MspInit+0x4c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_MspInit+0x4c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_MspInit+0x4c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_MspInit+0x4c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001316:	2007      	movs	r0, #7
 8001318:	f000 fab4 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a25      	ldr	r2, [pc, #148]	; (80013dc <HAL_I2C_MspInit+0xb4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d143      	bne.n	80013d2 <HAL_I2C_MspInit+0xaa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_I2C_MspInit+0xb8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <HAL_I2C_MspInit+0xb8>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_I2C_MspInit+0xb8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001366:	2340      	movs	r3, #64	; 0x40
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136a:	2312      	movs	r3, #18
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001376:	2304      	movs	r3, #4
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4818      	ldr	r0, [pc, #96]	; (80013e4 <HAL_I2C_MspInit+0xbc>)
 8001382:	f000 faf1 	bl	8001968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138a:	2312      	movs	r3, #18
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138e:	2301      	movs	r3, #1
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001396:	2304      	movs	r3, #4
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4810      	ldr	r0, [pc, #64]	; (80013e4 <HAL_I2C_MspInit+0xbc>)
 80013a2:	f000 fae1 	bl	8001968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_I2C_MspInit+0xb8>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <HAL_I2C_MspInit+0xb8>)
 80013b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_I2C_MspInit+0xb8>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	201f      	movs	r0, #31
 80013c8:	f000 fa67 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013cc:	201f      	movs	r0, #31
 80013ce:	f000 fa80 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40005400 	.word	0x40005400
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020400 	.word	0x40020400

080013e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f8:	d115      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_TIM_Base_MspInit+0x48>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <HAL_TIM_Base_MspInit+0x48>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_TIM_Base_MspInit+0x48>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	201c      	movs	r0, #28
 800141c:	f000 fa3d 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001420:	201c      	movs	r0, #28
 8001422:	f000 fa56 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001480:	f000 f8ec 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Arm_Button_Pin);
 800148c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001490:	f000 fc3a 	bl	8001d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <TIM2_IRQHandler+0x10>)
 800149e:	f005 f8d7 	bl	8006650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000164 	.word	0x20000164

080014ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <I2C1_EV_IRQHandler+0x10>)
 80014b2:	f002 fc97 	bl	8003de4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000110 	.word	0x20000110

080014c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <OTG_FS_IRQHandler+0x10>)
 80014c6:	f000 fea1 	bl	800220c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200005b8 	.word	0x200005b8

080014d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <_sbrk+0x5c>)
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <_sbrk+0x60>)
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <_sbrk+0x64>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <_sbrk+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001504:	f007 ff3e 	bl	8009384 <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	220c      	movs	r2, #12
 800150c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001512:	e009      	b.n	8001528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <_sbrk+0x64>)
 8001524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20020000 	.word	0x20020000
 8001534:	00000400 	.word	0x00000400
 8001538:	200001d4 	.word	0x200001d4
 800153c:	200008d0 	.word	0x200008d0

08001540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <SystemInit+0x20>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <SystemInit+0x20>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158e:	f7ff ffd7 	bl	8001540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f007 fefd 	bl	8009390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff fb0d 	bl	8000bb4 <main>
  bx  lr    
 800159a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800159c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80015a8:	08009664 	.word	0x08009664
  ldr r2, =_sbss
 80015ac:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80015b0:	200008cc 	.word	0x200008cc

080015b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f94f 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fe74 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f967 	bl	80018ee <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001638:	f000 f92f 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	20000008 	.word	0x20000008
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	200001d8 	.word	0x200001d8

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	200001d8 	.word	0x200001d8

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff29 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff3e 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff31 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d004      	beq.n	8001924 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e00c      	b.n	800193e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2205      	movs	r2, #5
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001958:	b2db      	uxtb	r3, r3
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e16b      	b.n	8001c5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 815a 	bne.w	8001c56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d005      	beq.n	80019ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d130      	bne.n	8001a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 0201 	and.w	r2, r3, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d017      	beq.n	8001a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80b4 	beq.w	8001c56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <HAL_GPIO_Init+0x30c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a5f      	ldr	r2, [pc, #380]	; (8001c74 <HAL_GPIO_Init+0x30c>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <HAL_GPIO_Init+0x30c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0a:	4a5b      	ldr	r2, [pc, #364]	; (8001c78 <HAL_GPIO_Init+0x310>)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <HAL_GPIO_Init+0x314>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d02b      	beq.n	8001b8e <HAL_GPIO_Init+0x226>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a51      	ldr	r2, [pc, #324]	; (8001c80 <HAL_GPIO_Init+0x318>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d025      	beq.n	8001b8a <HAL_GPIO_Init+0x222>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a50      	ldr	r2, [pc, #320]	; (8001c84 <HAL_GPIO_Init+0x31c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01f      	beq.n	8001b86 <HAL_GPIO_Init+0x21e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4f      	ldr	r2, [pc, #316]	; (8001c88 <HAL_GPIO_Init+0x320>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d019      	beq.n	8001b82 <HAL_GPIO_Init+0x21a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4e      	ldr	r2, [pc, #312]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d013      	beq.n	8001b7e <HAL_GPIO_Init+0x216>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4d      	ldr	r2, [pc, #308]	; (8001c90 <HAL_GPIO_Init+0x328>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00d      	beq.n	8001b7a <HAL_GPIO_Init+0x212>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4c      	ldr	r2, [pc, #304]	; (8001c94 <HAL_GPIO_Init+0x32c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d007      	beq.n	8001b76 <HAL_GPIO_Init+0x20e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <HAL_GPIO_Init+0x330>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d101      	bne.n	8001b72 <HAL_GPIO_Init+0x20a>
 8001b6e:	2307      	movs	r3, #7
 8001b70:	e00e      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b72:	2308      	movs	r3, #8
 8001b74:	e00c      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b76:	2306      	movs	r3, #6
 8001b78:	e00a      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b7a:	2305      	movs	r3, #5
 8001b7c:	e008      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b82:	2303      	movs	r3, #3
 8001b84:	e004      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e002      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	f002 0203 	and.w	r2, r2, #3
 8001b96:	0092      	lsls	r2, r2, #2
 8001b98:	4093      	lsls	r3, r2
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba0:	4935      	ldr	r1, [pc, #212]	; (8001c78 <HAL_GPIO_Init+0x310>)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd2:	4a32      	ldr	r2, [pc, #200]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bfc:	4a27      	ldr	r2, [pc, #156]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c26:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c50:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	f67f ae90 	bls.w	8001984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40013800 	.word	0x40013800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020400 	.word	0x40020400
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40021400 	.word	0x40021400
 8001c94:	40021800 	.word	0x40021800
 8001c98:	40021c00 	.word	0x40021c00
 8001c9c:	40013c00 	.word	0x40013c00

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cbc:	e003      	b.n	8001cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ce4:	887a      	ldrh	r2, [r7, #2]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff faba 	bl	80012a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	b08f      	sub	sp, #60	; 0x3c
 8001d3c:	af0a      	add	r7, sp, #40	; 0x28
 8001d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e054      	b.n	8001df4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f007 f8ad 	bl	8008ec4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f005 f89f 	bl	8006ecc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	687e      	ldr	r6, [r7, #4]
 8001d96:	466d      	mov	r5, sp
 8001d98:	f106 0410 	add.w	r4, r6, #16
 8001d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001da8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dac:	1d33      	adds	r3, r6, #4
 8001dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db0:	6838      	ldr	r0, [r7, #0]
 8001db2:	f005 f819 	bl	8006de8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f005 f896 	bl	8006eee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	687e      	ldr	r6, [r7, #4]
 8001dca:	466d      	mov	r5, sp
 8001dcc:	f106 0410 	add.w	r4, r6, #16
 8001dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ddc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de0:	1d33      	adds	r3, r6, #4
 8001de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de4:	6838      	ldr	r0, [r7, #0]
 8001de6:	f005 fa1f 	bl	8007228 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dfc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af04      	add	r7, sp, #16
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	4608      	mov	r0, r1
 8001e06:	4611      	mov	r1, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	70fb      	strb	r3, [r7, #3]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	70bb      	strb	r3, [r7, #2]
 8001e12:	4613      	mov	r3, r2
 8001e14:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_HCD_HC_Init+0x28>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e076      	b.n	8001f12 <HAL_HCD_HC_Init+0x116>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	333d      	adds	r3, #61	; 0x3d
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3338      	adds	r3, #56	; 0x38
 8001e4c:	787a      	ldrb	r2, [r7, #1]
 8001e4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3340      	adds	r3, #64	; 0x40
 8001e5e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e60:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3339      	adds	r3, #57	; 0x39
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	333f      	adds	r3, #63	; 0x3f
 8001e82:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	78ba      	ldrb	r2, [r7, #2]
 8001e8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e90:	b2d0      	uxtb	r0, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	333a      	adds	r3, #58	; 0x3a
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ea2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	da09      	bge.n	8001ebe <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	333b      	adds	r3, #59	; 0x3b
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	e008      	b.n	8001ed0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	212c      	movs	r1, #44	; 0x2c
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	333b      	adds	r3, #59	; 0x3b
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	212c      	movs	r1, #44	; 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	333c      	adds	r3, #60	; 0x3c
 8001ede:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ee2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	787c      	ldrb	r4, [r7, #1]
 8001eea:	78ba      	ldrb	r2, [r7, #2]
 8001eec:	78f9      	ldrb	r1, [r7, #3]
 8001eee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	4623      	mov	r3, r4
 8001f00:	f005 faee 	bl	80074e0 <USB_HC_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}

08001f1a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_HCD_HC_Halt+0x1e>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e00f      	b.n	8001f58 <HAL_HCD_HC_Halt+0x3e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f005 fd3e 	bl	80079ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	70fb      	strb	r3, [r7, #3]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70bb      	strb	r3, [r7, #2]
 8001f76:	4613      	mov	r3, r2
 8001f78:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	333b      	adds	r3, #59	; 0x3b
 8001f88:	78ba      	ldrb	r2, [r7, #2]
 8001f8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	212c      	movs	r1, #44	; 0x2c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	333f      	adds	r3, #63	; 0x3f
 8001f9a:	787a      	ldrb	r2, [r7, #1]
 8001f9c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f9e:	7c3b      	ldrb	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d112      	bne.n	8001fca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	212c      	movs	r1, #44	; 0x2c
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	3342      	adds	r3, #66	; 0x42
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	333d      	adds	r3, #61	; 0x3d
 8001fc4:	7f3a      	ldrb	r2, [r7, #28]
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	e008      	b.n	8001fdc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	212c      	movs	r1, #44	; 0x2c
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3342      	adds	r3, #66	; 0x42
 8001fd8:	2202      	movs	r2, #2
 8001fda:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fdc:	787b      	ldrb	r3, [r7, #1]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	f200 80c6 	bhi.w	8002170 <HAL_HCD_HC_SubmitRequest+0x210>
 8001fe4:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08001ffd 	.word	0x08001ffd
 8001ff0:	0800215d 	.word	0x0800215d
 8001ff4:	08002061 	.word	0x08002061
 8001ff8:	080020df 	.word	0x080020df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ffc:	7c3b      	ldrb	r3, [r7, #16]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	f040 80b8 	bne.w	8002174 <HAL_HCD_HC_SubmitRequest+0x214>
 8002004:	78bb      	ldrb	r3, [r7, #2]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 80b4 	bne.w	8002174 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800200c:	8b3b      	ldrh	r3, [r7, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d108      	bne.n	8002024 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	3355      	adds	r3, #85	; 0x55
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	3355      	adds	r3, #85	; 0x55
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	3342      	adds	r3, #66	; 0x42
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800204a:	e093      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3342      	adds	r3, #66	; 0x42
 800205a:	2202      	movs	r2, #2
 800205c:	701a      	strb	r2, [r3, #0]
      break;
 800205e:	e089      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002060:	78bb      	ldrb	r3, [r7, #2]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d11d      	bne.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3355      	adds	r3, #85	; 0x55
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3342      	adds	r3, #66	; 0x42
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800208c:	e073      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3342      	adds	r3, #66	; 0x42
 800209c:	2202      	movs	r2, #2
 800209e:	701a      	strb	r2, [r3, #0]
      break;
 80020a0:	e069      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3354      	adds	r3, #84	; 0x54
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3342      	adds	r3, #66	; 0x42
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
      break;
 80020c8:	e055      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3342      	adds	r3, #66	; 0x42
 80020d8:	2202      	movs	r2, #2
 80020da:	701a      	strb	r2, [r3, #0]
      break;
 80020dc:	e04b      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020de:	78bb      	ldrb	r3, [r7, #2]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d11d      	bne.n	8002120 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3355      	adds	r3, #85	; 0x55
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d109      	bne.n	800210c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3342      	adds	r3, #66	; 0x42
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800210a:	e034      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3342      	adds	r3, #66	; 0x42
 800211a:	2202      	movs	r2, #2
 800211c:	701a      	strb	r2, [r3, #0]
      break;
 800211e:	e02a      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3354      	adds	r3, #84	; 0x54
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3342      	adds	r3, #66	; 0x42
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
      break;
 8002146:	e016      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3342      	adds	r3, #66	; 0x42
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
      break;
 800215a:	e00c      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3342      	adds	r3, #66	; 0x42
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
      break;
 800216e:	e002      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002174:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3344      	adds	r3, #68	; 0x44
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	8b3a      	ldrh	r2, [r7, #24]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	202c      	movs	r0, #44	; 0x2c
 8002190:	fb00 f303 	mul.w	r3, r0, r3
 8002194:	440b      	add	r3, r1
 8002196:	334c      	adds	r3, #76	; 0x4c
 8002198:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3360      	adds	r3, #96	; 0x60
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3350      	adds	r3, #80	; 0x50
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3339      	adds	r3, #57	; 0x39
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3361      	adds	r3, #97	; 0x61
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	222c      	movs	r2, #44	; 0x2c
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	3338      	adds	r3, #56	; 0x38
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	18d1      	adds	r1, r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	f005 fa92 	bl	8007724 <USB_HC_StartXfer>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop

0800220c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f004 ffbd 	bl	80071a2 <USB_GetMode>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	f040 80f6 	bne.w	800241c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f004 ffa1 	bl	800717c <USB_ReadInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80ec 	beq.w	800241a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f004 ff98 	bl	800717c <USB_ReadInterrupts>
 800224c:	4603      	mov	r3, r0
 800224e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002256:	d104      	bne.n	8002262 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002260:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f004 ff88 	bl	800717c <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002276:	d104      	bne.n	8002282 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002280:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f004 ff78 	bl	800717c <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002296:	d104      	bne.n	80022a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 ff68 	bl	800717c <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d103      	bne.n	80022be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2202      	movs	r2, #2
 80022bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 ff5a 	bl	800717c <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d2:	d11c      	bne.n	800230e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10f      	bne.n	800230e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022ee:	2110      	movs	r1, #16
 80022f0:	6938      	ldr	r0, [r7, #16]
 80022f2:	f004 fe49 	bl	8006f88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80022f6:	6938      	ldr	r0, [r7, #16]
 80022f8:	f004 fe7a 	bl	8006ff0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	4618      	mov	r0, r3
 8002304:	f005 f850 	bl	80073a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f006 fe59 	bl	8008fc0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f004 ff32 	bl	800717c <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002322:	d102      	bne.n	800232a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f001 f882 	bl	800342e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f004 ff24 	bl	800717c <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b08      	cmp	r3, #8
 800233c:	d106      	bne.n	800234c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f006 fe22 	bl	8008f88 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2208      	movs	r2, #8
 800234a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f004 ff13 	bl	800717c <USB_ReadInterrupts>
 8002356:	4603      	mov	r3, r0
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b10      	cmp	r3, #16
 800235e:	d101      	bne.n	8002364 <HAL_HCD_IRQHandler+0x158>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_HCD_IRQHandler+0x15a>
 8002364:	2300      	movs	r3, #0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d012      	beq.n	8002390 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0210 	bic.w	r2, r2, #16
 8002378:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 ff85 	bl	800328a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0210 	orr.w	r2, r2, #16
 800238e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f004 fef1 	bl	800717c <USB_ReadInterrupts>
 800239a:	4603      	mov	r3, r0
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023a4:	d13a      	bne.n	800241c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 fafc 	bl	80079a8 <USB_HC_ReadInterrupt>
 80023b0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e025      	b.n	8002404 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d018      	beq.n	80023fe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e2:	d106      	bne.n	80023f2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4619      	mov	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f88f 	bl	800250e <HCD_HC_IN_IRQHandler>
 80023f0:	e005      	b.n	80023fe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4619      	mov	r1, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fbdd 	bl	8002bb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	429a      	cmp	r2, r3
 800240c:	d3d4      	bcc.n	80023b8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	e000      	b.n	800241c <HAL_HCD_IRQHandler+0x210>
      return;
 800241a:	bf00      	nop
    }
  }
}
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_HCD_Start+0x16>
 8002434:	2302      	movs	r3, #2
 8002436:	e013      	b.n	8002460 <HAL_HCD_Start+0x3e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2101      	movs	r1, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f004 ffe8 	bl	800741c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f004 fd2a 	bl	8006eaa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_HCD_Stop+0x16>
 800247a:	2302      	movs	r3, #2
 800247c:	e00d      	b.n	800249a <HAL_HCD_Stop+0x32>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f005 fbd6 	bl	8007c3c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3360      	adds	r3, #96	; 0x60
 80024bc:	781b      	ldrb	r3, [r3, #0]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3350      	adds	r3, #80	; 0x50
 80024e4:	681b      	ldr	r3, [r3, #0]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f004 ffdc 	bl	80074bc <USB_GetCurrentFrame>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b04      	cmp	r3, #4
 800253c:	d11a      	bne.n	8002574 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	461a      	mov	r2, r3
 800254c:	2304      	movs	r3, #4
 800254e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3361      	adds	r3, #97	; 0x61
 800255e:	2206      	movs	r2, #6
 8002560:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f005 fa2c 	bl	80079ca <USB_HC_Halt>
 8002572:	e0af      	b.n	80026d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258a:	d11b      	bne.n	80025c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3361      	adds	r3, #97	; 0x61
 80025ae:	2207      	movs	r2, #7
 80025b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f005 fa04 	bl	80079ca <USB_HC_Halt>
 80025c2:	e087      	b.n	80026d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d109      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	461a      	mov	r2, r3
 80025e8:	2320      	movs	r3, #32
 80025ea:	6093      	str	r3, [r2, #8]
 80025ec:	e072      	b.n	80026d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b08      	cmp	r3, #8
 8002602:	d11a      	bne.n	800263a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	461a      	mov	r2, r3
 8002612:	2308      	movs	r3, #8
 8002614:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3361      	adds	r3, #97	; 0x61
 8002624:	2205      	movs	r2, #5
 8002626:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f005 f9c9 	bl	80079ca <USB_HC_Halt>
 8002638:	e04c      	b.n	80026d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002650:	d11b      	bne.n	800268a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	461a      	mov	r2, r3
 8002660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002664:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3361      	adds	r3, #97	; 0x61
 8002674:	2208      	movs	r2, #8
 8002676:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f005 f9a1 	bl	80079ca <USB_HC_Halt>
 8002688:	e024      	b.n	80026d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b80      	cmp	r3, #128	; 0x80
 800269e:	d119      	bne.n	80026d4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	461a      	mov	r2, r3
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3361      	adds	r3, #97	; 0x61
 80026c0:	2206      	movs	r2, #6
 80026c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f005 f97b 	bl	80079ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ea:	d112      	bne.n	8002712 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f005 f967 	bl	80079ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	461a      	mov	r2, r3
 800270a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002710:	e24e      	b.n	8002bb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 80df 	bne.w	80028e8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d019      	beq.n	8002766 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3348      	adds	r3, #72	; 0x48
 8002740:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	0159      	lsls	r1, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	440b      	add	r3, r1
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002754:	1ad2      	subs	r2, r2, r3
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	202c      	movs	r0, #44	; 0x2c
 800275c:	fb00 f303 	mul.w	r3, r0, r3
 8002760:	440b      	add	r3, r1
 8002762:	3350      	adds	r3, #80	; 0x50
 8002764:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3361      	adds	r3, #97	; 0x61
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	335c      	adds	r3, #92	; 0x5c
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	461a      	mov	r2, r3
 8002798:	2301      	movs	r3, #1
 800279a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	333f      	adds	r3, #63	; 0x3f
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	333f      	adds	r3, #63	; 0x3f
 80027be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d111      	bne.n	80027e8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f005 f8fb 	bl	80079ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	461a      	mov	r2, r3
 80027e2:	2310      	movs	r3, #16
 80027e4:	6093      	str	r3, [r2, #8]
 80027e6:	e03a      	b.n	800285e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	333f      	adds	r3, #63	; 0x3f
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d009      	beq.n	8002810 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	333f      	adds	r3, #63	; 0x3f
 800280a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800280c:	2b01      	cmp	r3, #1
 800280e:	d126      	bne.n	800285e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	0151      	lsls	r1, r2, #5
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	440a      	add	r2, r1
 8002826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800282e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3360      	adds	r3, #96	; 0x60
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	b2d9      	uxtb	r1, r3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	202c      	movs	r0, #44	; 0x2c
 800284c:	fb00 f303 	mul.w	r3, r0, r3
 8002850:	4413      	add	r3, r2
 8002852:	3360      	adds	r3, #96	; 0x60
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f006 fbbf 	bl	8008fdc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d12b      	bne.n	80028be <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3348      	adds	r3, #72	; 0x48
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	202c      	movs	r0, #44	; 0x2c
 800287c:	fb00 f202 	mul.w	r2, r0, r2
 8002880:	440a      	add	r2, r1
 8002882:	3240      	adds	r2, #64	; 0x40
 8002884:	8812      	ldrh	r2, [r2, #0]
 8002886:	fbb3 f3f2 	udiv	r3, r3, r2
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 818e 	beq.w	8002bb0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3354      	adds	r3, #84	; 0x54
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	f083 0301 	eor.w	r3, r3, #1
 80028a8:	b2d8      	uxtb	r0, r3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3354      	adds	r3, #84	; 0x54
 80028b8:	4602      	mov	r2, r0
 80028ba:	701a      	strb	r2, [r3, #0]
}
 80028bc:	e178      	b.n	8002bb0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	3354      	adds	r3, #84	; 0x54
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	f083 0301 	eor.w	r3, r3, #1
 80028d2:	b2d8      	uxtb	r0, r3
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3354      	adds	r3, #84	; 0x54
 80028e2:	4602      	mov	r2, r0
 80028e4:	701a      	strb	r2, [r3, #0]
}
 80028e6:	e163      	b.n	8002bb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	f040 80f6 	bne.w	8002aec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3361      	adds	r3, #97	; 0x61
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d109      	bne.n	8002928 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3360      	adds	r3, #96	; 0x60
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e0c9      	b.n	8002abc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3361      	adds	r3, #97	; 0x61
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b05      	cmp	r3, #5
 800293a:	d109      	bne.n	8002950 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3360      	adds	r3, #96	; 0x60
 800294a:	2205      	movs	r2, #5
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	e0b5      	b.n	8002abc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3361      	adds	r3, #97	; 0x61
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b06      	cmp	r3, #6
 8002962:	d009      	beq.n	8002978 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002974:	2b08      	cmp	r3, #8
 8002976:	d150      	bne.n	8002a1a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	335c      	adds	r3, #92	; 0x5c
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	202c      	movs	r0, #44	; 0x2c
 8002990:	fb00 f303 	mul.w	r3, r0, r3
 8002994:	440b      	add	r3, r1
 8002996:	335c      	adds	r3, #92	; 0x5c
 8002998:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	335c      	adds	r3, #92	; 0x5c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d912      	bls.n	80029d4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	335c      	adds	r3, #92	; 0x5c
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3360      	adds	r3, #96	; 0x60
 80029ce:	2204      	movs	r2, #4
 80029d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029d2:	e073      	b.n	8002abc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3360      	adds	r3, #96	; 0x60
 80029e2:	2202      	movs	r2, #2
 80029e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029fc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a04:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a18:	e050      	b.n	8002abc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3361      	adds	r3, #97	; 0x61
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d122      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3360      	adds	r3, #96	; 0x60
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a56:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a5e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e023      	b.n	8002abc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3361      	adds	r3, #97	; 0x61
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b07      	cmp	r3, #7
 8002a86:	d119      	bne.n	8002abc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	335c      	adds	r3, #92	; 0x5c
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	202c      	movs	r0, #44	; 0x2c
 8002aa0:	fb00 f303 	mul.w	r3, r0, r3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	335c      	adds	r3, #92	; 0x5c
 8002aa8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3360      	adds	r3, #96	; 0x60
 8002ab8:	2204      	movs	r2, #4
 8002aba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2302      	movs	r3, #2
 8002acc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	b2d9      	uxtb	r1, r3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	202c      	movs	r0, #44	; 0x2c
 8002ad8:	fb00 f303 	mul.w	r3, r0, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3360      	adds	r3, #96	; 0x60
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f006 fa79 	bl	8008fdc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aea:	e061      	b.n	8002bb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	d156      	bne.n	8002bb0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333f      	adds	r3, #63	; 0x3f
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d111      	bne.n	8002b3a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 ff49 	bl	80079ca <USB_HC_Halt>
 8002b38:	e031      	b.n	8002b9e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	333f      	adds	r3, #63	; 0x3f
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	333f      	adds	r3, #63	; 0x3f
 8002b5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d11d      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	335c      	adds	r3, #92	; 0x5c
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d110      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3361      	adds	r3, #97	; 0x61
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 ff16 	bl	80079ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	461a      	mov	r2, r3
 8002bac:	2310      	movs	r3, #16
 8002bae:	6093      	str	r3, [r2, #8]
}
 8002bb0:	bf00      	nop
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d11a      	bne.n	8002c1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3361      	adds	r3, #97	; 0x61
 8002c08:	2206      	movs	r2, #6
 8002c0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f004 fed7 	bl	80079ca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002c1c:	e331      	b.n	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d12e      	bne.n	8002c92 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	461a      	mov	r2, r3
 8002c42:	2320      	movs	r3, #32
 8002c44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	333d      	adds	r3, #61	; 0x3d
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	f040 8313 	bne.w	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	333d      	adds	r3, #61	; 0x3d
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3360      	adds	r3, #96	; 0x60
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 fe9d 	bl	80079ca <USB_HC_Halt>
}
 8002c90:	e2f7      	b.n	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca8:	d112      	bne.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cbc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 fe7e 	bl	80079ca <USB_HC_Halt>
}
 8002cce:	e2d8      	b.n	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d140      	bne.n	8002d68 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	335c      	adds	r3, #92	; 0x5c
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d111      	bne.n	8002d32 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	333d      	adds	r3, #61	; 0x3d
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2301      	movs	r3, #1
 8002d42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3361      	adds	r3, #97	; 0x61
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f004 fe32 	bl	80079ca <USB_HC_Halt>
}
 8002d66:	e28c      	b.n	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d12c      	bne.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3361      	adds	r3, #97	; 0x61
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	333d      	adds	r3, #61	; 0x3d
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	335c      	adds	r3, #92	; 0x5c
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f004 fe03 	bl	80079ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2340      	movs	r3, #64	; 0x40
 8002dd4:	6093      	str	r3, [r2, #8]
}
 8002dd6:	e254      	b.n	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d11a      	bne.n	8002e24 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3361      	adds	r3, #97	; 0x61
 8002e0e:	2205      	movs	r2, #5
 8002e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 fdd4 	bl	80079ca <USB_HC_Halt>
}
 8002e22:	e22e      	b.n	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d140      	bne.n	8002ebc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	335c      	adds	r3, #92	; 0x5c
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3361      	adds	r3, #97	; 0x61
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	333d      	adds	r3, #61	; 0x3d
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d112      	bne.n	8002e98 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	333c      	adds	r3, #60	; 0x3c
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	333d      	adds	r3, #61	; 0x3d
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f004 fd91 	bl	80079ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	6093      	str	r3, [r2, #8]
}
 8002eba:	e1e2      	b.n	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ece:	2b80      	cmp	r3, #128	; 0x80
 8002ed0:	d164      	bne.n	8002f9c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d111      	bne.n	8002efe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3361      	adds	r3, #97	; 0x61
 8002ee8:	2206      	movs	r2, #6
 8002eea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 fd67 	bl	80079ca <USB_HC_Halt>
 8002efc:	e044      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	335c      	adds	r3, #92	; 0x5c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	202c      	movs	r0, #44	; 0x2c
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	335c      	adds	r3, #92	; 0x5c
 8002f1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	335c      	adds	r3, #92	; 0x5c
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d920      	bls.n	8002f76 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	212c      	movs	r1, #44	; 0x2c
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	335c      	adds	r3, #92	; 0x5c
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3360      	adds	r3, #96	; 0x60
 8002f54:	2204      	movs	r2, #4
 8002f56:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	b2d9      	uxtb	r1, r3
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	202c      	movs	r0, #44	; 0x2c
 8002f62:	fb00 f303 	mul.w	r3, r0, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3360      	adds	r3, #96	; 0x60
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f006 f834 	bl	8008fdc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f74:	e008      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3360      	adds	r3, #96	; 0x60
 8002f84:	2202      	movs	r2, #2
 8002f86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	461a      	mov	r2, r3
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	6093      	str	r3, [r2, #8]
}
 8002f9a:	e172      	b.n	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb2:	d11b      	bne.n	8002fec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3361      	adds	r3, #97	; 0x61
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 fcfa 	bl	80079ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe8:	6093      	str	r3, [r2, #8]
}
 8002fea:	e14a      	b.n	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	f040 813f 	bne.w	8003282 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3361      	adds	r3, #97	; 0x61
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d17d      	bne.n	8003114 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3360      	adds	r3, #96	; 0x60
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	333f      	adds	r3, #63	; 0x3f
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d00a      	beq.n	8003054 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	333f      	adds	r3, #63	; 0x3f
 800304c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800304e:	2b03      	cmp	r3, #3
 8003050:	f040 8100 	bne.w	8003254 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d113      	bne.n	8003084 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	212c      	movs	r1, #44	; 0x2c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	3355      	adds	r3, #85	; 0x55
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	f083 0301 	eor.w	r3, r3, #1
 8003070:	b2d8      	uxtb	r0, r3
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3355      	adds	r3, #85	; 0x55
 8003080:	4602      	mov	r2, r0
 8003082:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b01      	cmp	r3, #1
 800308a:	f040 80e3 	bne.w	8003254 <HCD_HC_OUT_IRQHandler+0x69c>
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	334c      	adds	r3, #76	; 0x4c
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80d8 	beq.w	8003254 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	334c      	adds	r3, #76	; 0x4c
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	202c      	movs	r0, #44	; 0x2c
 80030ba:	fb00 f202 	mul.w	r2, r0, r2
 80030be:	440a      	add	r2, r1
 80030c0:	3240      	adds	r2, #64	; 0x40
 80030c2:	8812      	ldrh	r2, [r2, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	3b01      	subs	r3, #1
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	202c      	movs	r0, #44	; 0x2c
 80030ce:	fb00 f202 	mul.w	r2, r0, r2
 80030d2:	440a      	add	r2, r1
 80030d4:	3240      	adds	r2, #64	; 0x40
 80030d6:	8812      	ldrh	r2, [r2, #0]
 80030d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80b5 	beq.w	8003254 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	3355      	adds	r3, #85	; 0x55
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	f083 0301 	eor.w	r3, r3, #1
 80030fe:	b2d8      	uxtb	r0, r3
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3355      	adds	r3, #85	; 0x55
 800310e:	4602      	mov	r2, r0
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e09f      	b.n	8003254 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	3361      	adds	r3, #97	; 0x61
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d109      	bne.n	800313c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3360      	adds	r3, #96	; 0x60
 8003136:	2202      	movs	r2, #2
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e08b      	b.n	8003254 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3361      	adds	r3, #97	; 0x61
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d109      	bne.n	8003164 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3360      	adds	r3, #96	; 0x60
 800315e:	2202      	movs	r2, #2
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e077      	b.n	8003254 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3361      	adds	r3, #97	; 0x61
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b05      	cmp	r3, #5
 8003176:	d109      	bne.n	800318c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3360      	adds	r3, #96	; 0x60
 8003186:	2205      	movs	r2, #5
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e063      	b.n	8003254 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3361      	adds	r3, #97	; 0x61
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b06      	cmp	r3, #6
 800319e:	d009      	beq.n	80031b4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3361      	adds	r3, #97	; 0x61
 80031ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d14f      	bne.n	8003254 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	335c      	adds	r3, #92	; 0x5c
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	202c      	movs	r0, #44	; 0x2c
 80031cc:	fb00 f303 	mul.w	r3, r0, r3
 80031d0:	440b      	add	r3, r1
 80031d2:	335c      	adds	r3, #92	; 0x5c
 80031d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	335c      	adds	r3, #92	; 0x5c
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d912      	bls.n	8003210 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	212c      	movs	r1, #44	; 0x2c
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	3360      	adds	r3, #96	; 0x60
 800320a:	2204      	movs	r2, #4
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e021      	b.n	8003254 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3360      	adds	r3, #96	; 0x60
 800321e:	2202      	movs	r2, #2
 8003220:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003238:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003240:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4413      	add	r3, r2
 800324a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324e:	461a      	mov	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	461a      	mov	r2, r3
 8003262:	2302      	movs	r3, #2
 8003264:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	b2d9      	uxtb	r1, r3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	202c      	movs	r0, #44	; 0x2c
 8003270:	fb00 f303 	mul.w	r3, r0, r3
 8003274:	4413      	add	r3, r2
 8003276:	3360      	adds	r3, #96	; 0x60
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f005 fead 	bl	8008fdc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003282:	bf00      	nop
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b08a      	sub	sp, #40	; 0x28
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	0c5b      	lsrs	r3, r3, #17
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032be:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d004      	beq.n	80032d0 <HCD_RXQLVL_IRQHandler+0x46>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	f000 80a9 	beq.w	8003420 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032ce:	e0aa      	b.n	8003426 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80a6 	beq.w	8003424 <HCD_RXQLVL_IRQHandler+0x19a>
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3344      	adds	r3, #68	; 0x44
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 809b 	beq.w	8003424 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	3350      	adds	r3, #80	; 0x50
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	441a      	add	r2, r3
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	202c      	movs	r0, #44	; 0x2c
 8003308:	fb00 f303 	mul.w	r3, r0, r3
 800330c:	440b      	add	r3, r1
 800330e:	334c      	adds	r3, #76	; 0x4c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d87a      	bhi.n	800340c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	3344      	adds	r3, #68	; 0x44
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	b292      	uxth	r2, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f003 fecc 	bl	80070cc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3344      	adds	r3, #68	; 0x44
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	441a      	add	r2, r3
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	202c      	movs	r0, #44	; 0x2c
 800334e:	fb00 f303 	mul.w	r3, r0, r3
 8003352:	440b      	add	r3, r1
 8003354:	3344      	adds	r3, #68	; 0x44
 8003356:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	3350      	adds	r3, #80	; 0x50
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	441a      	add	r2, r3
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	202c      	movs	r0, #44	; 0x2c
 8003372:	fb00 f303 	mul.w	r3, r0, r3
 8003376:	440b      	add	r3, r1
 8003378:	3350      	adds	r3, #80	; 0x50
 800337a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	0cdb      	lsrs	r3, r3, #19
 800338c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003390:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	3340      	adds	r3, #64	; 0x40
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d13c      	bne.n	8003424 <HCD_RXQLVL_IRQHandler+0x19a>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d039      	beq.n	8003424 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033dc:	461a      	mov	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	3354      	adds	r3, #84	; 0x54
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	f083 0301 	eor.w	r3, r3, #1
 80033f6:	b2d8      	uxtb	r0, r3
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3354      	adds	r3, #84	; 0x54
 8003406:	4602      	mov	r2, r0
 8003408:	701a      	strb	r2, [r3, #0]
      break;
 800340a:	e00b      	b.n	8003424 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	3360      	adds	r3, #96	; 0x60
 800341a:	2204      	movs	r2, #4
 800341c:	701a      	strb	r2, [r3, #0]
      break;
 800341e:	e001      	b.n	8003424 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003420:	bf00      	nop
 8003422:	e000      	b.n	8003426 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003424:	bf00      	nop
  }
}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	; 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800345a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b02      	cmp	r3, #2
 8003464:	d10b      	bne.n	800347e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d102      	bne.n	8003476 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f005 fd97 	bl	8008fa4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b08      	cmp	r3, #8
 8003486:	d132      	bne.n	80034ee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f043 0308 	orr.w	r3, r3, #8
 800348e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d126      	bne.n	80034e8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d113      	bne.n	80034ca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034ac:	d106      	bne.n	80034bc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2102      	movs	r1, #2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 ff77 	bl	80073a8 <USB_InitFSLSPClkSel>
 80034ba:	e011      	b.n	80034e0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2101      	movs	r1, #1
 80034c2:	4618      	mov	r0, r3
 80034c4:	f003 ff70 	bl	80073a8 <USB_InitFSLSPClkSel>
 80034c8:	e00a      	b.n	80034e0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d106      	bne.n	80034e0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034d8:	461a      	mov	r2, r3
 80034da:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034de:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f005 fd89 	bl	8008ff8 <HAL_HCD_PortEnabled_Callback>
 80034e6:	e002      	b.n	80034ee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f005 fd93 	bl	8009014 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d103      	bne.n	8003500 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f043 0320 	orr.w	r3, r3, #32
 80034fe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003506:	461a      	mov	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	6013      	str	r3, [r2, #0]
}
 800350c:	bf00      	nop
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e12b      	b.n	800377e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fef4 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2224      	movs	r2, #36	; 0x24
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003578:	f002 ff96 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 800357c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4a81      	ldr	r2, [pc, #516]	; (8003788 <HAL_I2C_Init+0x274>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d807      	bhi.n	8003598 <HAL_I2C_Init+0x84>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a80      	ldr	r2, [pc, #512]	; (800378c <HAL_I2C_Init+0x278>)
 800358c:	4293      	cmp	r3, r2
 800358e:	bf94      	ite	ls
 8003590:	2301      	movls	r3, #1
 8003592:	2300      	movhi	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e006      	b.n	80035a6 <HAL_I2C_Init+0x92>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a7d      	ldr	r2, [pc, #500]	; (8003790 <HAL_I2C_Init+0x27c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	bf94      	ite	ls
 80035a0:	2301      	movls	r3, #1
 80035a2:	2300      	movhi	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0e7      	b.n	800377e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a78      	ldr	r2, [pc, #480]	; (8003794 <HAL_I2C_Init+0x280>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0c9b      	lsrs	r3, r3, #18
 80035b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a6a      	ldr	r2, [pc, #424]	; (8003788 <HAL_I2C_Init+0x274>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d802      	bhi.n	80035e8 <HAL_I2C_Init+0xd4>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	3301      	adds	r3, #1
 80035e6:	e009      	b.n	80035fc <HAL_I2C_Init+0xe8>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	4a69      	ldr	r2, [pc, #420]	; (8003798 <HAL_I2C_Init+0x284>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	3301      	adds	r3, #1
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	430b      	orrs	r3, r1
 8003602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800360e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	495c      	ldr	r1, [pc, #368]	; (8003788 <HAL_I2C_Init+0x274>)
 8003618:	428b      	cmp	r3, r1
 800361a:	d819      	bhi.n	8003650 <HAL_I2C_Init+0x13c>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1e59      	subs	r1, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fbb1 f3f3 	udiv	r3, r1, r3
 800362a:	1c59      	adds	r1, r3, #1
 800362c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003630:	400b      	ands	r3, r1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_I2C_Init+0x138>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1e59      	subs	r1, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fbb1 f3f3 	udiv	r3, r1, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364a:	e051      	b.n	80036f0 <HAL_I2C_Init+0x1dc>
 800364c:	2304      	movs	r3, #4
 800364e:	e04f      	b.n	80036f0 <HAL_I2C_Init+0x1dc>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d111      	bne.n	800367c <HAL_I2C_Init+0x168>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1e58      	subs	r0, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	440b      	add	r3, r1
 8003666:	fbb0 f3f3 	udiv	r3, r0, r3
 800366a:	3301      	adds	r3, #1
 800366c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e012      	b.n	80036a2 <HAL_I2C_Init+0x18e>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1e58      	subs	r0, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	0099      	lsls	r1, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Init+0x196>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e022      	b.n	80036f0 <HAL_I2C_Init+0x1dc>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10e      	bne.n	80036d0 <HAL_I2C_Init+0x1bc>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e58      	subs	r0, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	440b      	add	r3, r1
 80036c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ce:	e00f      	b.n	80036f0 <HAL_I2C_Init+0x1dc>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1e58      	subs	r0, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	0099      	lsls	r1, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	6809      	ldr	r1, [r1, #0]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800371e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6911      	ldr	r1, [r2, #16]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68d2      	ldr	r2, [r2, #12]
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	430b      	orrs	r3, r1
 8003732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	000186a0 	.word	0x000186a0
 800378c:	001e847f 	.word	0x001e847f
 8003790:	003d08ff 	.word	0x003d08ff
 8003794:	431bde83 	.word	0x431bde83
 8003798:	10624dd3 	.word	0x10624dd3

0800379c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	461a      	mov	r2, r3
 80037a8:	460b      	mov	r3, r1
 80037aa:	817b      	strh	r3, [r7, #10]
 80037ac:	4613      	mov	r3, r2
 80037ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7fd ff68 	bl	8001684 <HAL_GetTick>
 80037b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b20      	cmp	r3, #32
 80037c0:	f040 80e0 	bne.w	8003984 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2319      	movs	r3, #25
 80037ca:	2201      	movs	r2, #1
 80037cc:	4970      	ldr	r1, [pc, #448]	; (8003990 <HAL_I2C_Master_Transmit+0x1f4>)
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f001 ffd0 	bl	8005774 <I2C_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
 80037dc:	e0d3      	b.n	8003986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_I2C_Master_Transmit+0x50>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e0cc      	b.n	8003986 <HAL_I2C_Master_Transmit+0x1ea>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d007      	beq.n	8003812 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003820:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2221      	movs	r2, #33	; 0x21
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2210      	movs	r2, #16
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	893a      	ldrh	r2, [r7, #8]
 8003842:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a50      	ldr	r2, [pc, #320]	; (8003994 <HAL_I2C_Master_Transmit+0x1f8>)
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003854:	8979      	ldrh	r1, [r7, #10]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f001 fd92 	bl	8005384 <I2C_MasterRequestWrite>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e08d      	b.n	8003986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003880:	e066      	b.n	8003950 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	6a39      	ldr	r1, [r7, #32]
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f002 f84a 	bl	8005920 <I2C_WaitOnTXEFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2b04      	cmp	r3, #4
 8003898:	d107      	bne.n	80038aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e06b      	b.n	8003986 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	781a      	ldrb	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d11b      	bne.n	8003924 <HAL_I2C_Master_Transmit+0x188>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d017      	beq.n	8003924 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	6a39      	ldr	r1, [r7, #32]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f002 f83a 	bl	80059a2 <I2C_WaitOnBTFFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00d      	beq.n	8003950 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	2b04      	cmp	r3, #4
 800393a:	d107      	bne.n	800394c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e01a      	b.n	8003986 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	2b00      	cmp	r3, #0
 8003956:	d194      	bne.n	8003882 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	00100002 	.word	0x00100002
 8003994:	ffff0000 	.word	0xffff0000

08003998 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	461a      	mov	r2, r3
 80039a4:	460b      	mov	r3, r1
 80039a6:	817b      	strh	r3, [r7, #10]
 80039a8:	4613      	mov	r3, r2
 80039aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7fd fe6a 	bl	8001684 <HAL_GetTick>
 80039b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	f040 820b 	bne.w	8003dd6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2319      	movs	r3, #25
 80039c6:	2201      	movs	r2, #1
 80039c8:	497c      	ldr	r1, [pc, #496]	; (8003bbc <HAL_I2C_Master_Receive+0x224>)
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f001 fed2 	bl	8005774 <I2C_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
 80039d8:	e1fe      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_I2C_Master_Receive+0x50>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e1f7      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x440>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d007      	beq.n	8003a0e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2222      	movs	r2, #34	; 0x22
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	893a      	ldrh	r2, [r7, #8]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a5c      	ldr	r2, [pc, #368]	; (8003bc0 <HAL_I2C_Master_Receive+0x228>)
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a50:	8979      	ldrh	r1, [r7, #10]
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f001 fd16 	bl	8005488 <I2C_MasterRequestRead>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e1b8      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d113      	bne.n	8003a96 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	623b      	str	r3, [r7, #32]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	623b      	str	r3, [r7, #32]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	623b      	str	r3, [r7, #32]
 8003a82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e18c      	b.n	8003db0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d11b      	bne.n	8003ad6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e16c      	b.n	8003db0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d11b      	bne.n	8003b16 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	e14c      	b.n	8003db0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b3c:	e138      	b.n	8003db0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	f200 80f1 	bhi.w	8003d2a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d123      	bne.n	8003b98 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f001 ff97 	bl	8005a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e139      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b96:	e10b      	b.n	8003db0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d14e      	bne.n	8003c3e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	4906      	ldr	r1, [pc, #24]	; (8003bc4 <HAL_I2C_Master_Receive+0x22c>)
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f001 fde2 	bl	8005774 <I2C_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e10e      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x440>
 8003bba:	bf00      	nop
 8003bbc:	00100002 	.word	0x00100002
 8003bc0:	ffff0000 	.word	0xffff0000
 8003bc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c3c:	e0b8      	b.n	8003db0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	2200      	movs	r2, #0
 8003c46:	4966      	ldr	r1, [pc, #408]	; (8003de0 <HAL_I2C_Master_Receive+0x448>)
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f001 fd93 	bl	8005774 <I2C_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0bf      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	494f      	ldr	r1, [pc, #316]	; (8003de0 <HAL_I2C_Master_Receive+0x448>)
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f001 fd65 	bl	8005774 <I2C_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e091      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d28:	e042      	b.n	8003db0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f001 feaa 	bl	8005a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e04c      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d118      	bne.n	8003db0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f47f aec2 	bne.w	8003b3e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e000      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
  }
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	00010004 	.word	0x00010004

08003de4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d003      	beq.n	8003e1c <HAL_I2C_EV_IRQHandler+0x38>
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	f040 80c1 	bne.w	8003f9e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10d      	bne.n	8003e52 <HAL_I2C_EV_IRQHandler+0x6e>
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e3c:	d003      	beq.n	8003e46 <HAL_I2C_EV_IRQHandler+0x62>
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e44:	d101      	bne.n	8003e4a <HAL_I2C_EV_IRQHandler+0x66>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <HAL_I2C_EV_IRQHandler+0x68>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	f000 8132 	beq.w	80040b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <HAL_I2C_EV_IRQHandler+0x92>
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	0a5b      	lsrs	r3, r3, #9
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d006      	beq.n	8003e76 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f001 fe92 	bl	8005b92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fcdc 	bl	800482c <I2C_Master_SB>
 8003e74:	e092      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	08db      	lsrs	r3, r3, #3
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_I2C_EV_IRQHandler+0xb2>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	0a5b      	lsrs	r3, r3, #9
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fd52 	bl	8004938 <I2C_Master_ADD10>
 8003e94:	e082      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	0a5b      	lsrs	r3, r3, #9
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fd6c 	bl	800498c <I2C_Master_ADDR>
 8003eb4:	e072      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d03b      	beq.n	8003f3a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed0:	f000 80f3 	beq.w	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	09db      	lsrs	r3, r3, #7
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00f      	beq.n	8003f00 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	0a9b      	lsrs	r3, r3, #10
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <HAL_I2C_EV_IRQHandler+0x11c>
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	089b      	lsrs	r3, r3, #2
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d103      	bne.n	8003f00 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f94c 	bl	8004196 <I2C_MasterTransmit_TXE>
 8003efe:	e04d      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80d6 	beq.w	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	0a5b      	lsrs	r3, r3, #9
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80cf 	beq.w	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f1c:	7bbb      	ldrb	r3, [r7, #14]
 8003f1e:	2b21      	cmp	r3, #33	; 0x21
 8003f20:	d103      	bne.n	8003f2a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f9d3 	bl	80042ce <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f28:	e0c7      	b.n	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	f040 80c4 	bne.w	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa41 	bl	80043ba <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f38:	e0bf      	b.n	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	f000 80b7 	beq.w	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00f      	beq.n	8003f78 <HAL_I2C_EV_IRQHandler+0x194>
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	0a9b      	lsrs	r3, r3, #10
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_I2C_EV_IRQHandler+0x194>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	089b      	lsrs	r3, r3, #2
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d103      	bne.n	8003f78 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fab6 	bl	80044e2 <I2C_MasterReceive_RXNE>
 8003f76:	e011      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	089b      	lsrs	r3, r3, #2
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 809a 	beq.w	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	0a5b      	lsrs	r3, r3, #9
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8093 	beq.w	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fb5f 	bl	8004658 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f9a:	e08e      	b.n	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f9c:	e08d      	b.n	80040ba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	e007      	b.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d012      	beq.n	8003ff2 <HAL_I2C_EV_IRQHandler+0x20e>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	0a5b      	lsrs	r3, r3, #9
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00c      	beq.n	8003ff2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003fe8:	69b9      	ldr	r1, [r7, #24]
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 ff1d 	bl	8004e2a <I2C_Slave_ADDR>
 8003ff0:	e066      	b.n	80040c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_I2C_EV_IRQHandler+0x22e>
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	0a5b      	lsrs	r3, r3, #9
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 ff58 	bl	8004ec0 <I2C_Slave_STOPF>
 8004010:	e056      	b.n	80040c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004012:	7bbb      	ldrb	r3, [r7, #14]
 8004014:	2b21      	cmp	r3, #33	; 0x21
 8004016:	d002      	beq.n	800401e <HAL_I2C_EV_IRQHandler+0x23a>
 8004018:	7bbb      	ldrb	r3, [r7, #14]
 800401a:	2b29      	cmp	r3, #41	; 0x29
 800401c:	d125      	bne.n	800406a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	09db      	lsrs	r3, r3, #7
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00f      	beq.n	800404a <HAL_I2C_EV_IRQHandler+0x266>
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	0a9b      	lsrs	r3, r3, #10
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_I2C_EV_IRQHandler+0x266>
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fe33 	bl	8004cae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004048:	e039      	b.n	80040be <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d033      	beq.n	80040be <HAL_I2C_EV_IRQHandler+0x2da>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	0a5b      	lsrs	r3, r3, #9
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d02d      	beq.n	80040be <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fe60 	bl	8004d28 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004068:	e029      	b.n	80040be <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	099b      	lsrs	r3, r3, #6
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00f      	beq.n	8004096 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	0a9b      	lsrs	r3, r3, #10
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	089b      	lsrs	r3, r3, #2
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fe6b 	bl	8004d6a <I2C_SlaveReceive_RXNE>
 8004094:	e014      	b.n	80040c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	089b      	lsrs	r3, r3, #2
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00e      	beq.n	80040c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	0a5b      	lsrs	r3, r3, #9
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fe99 	bl	8004de6 <I2C_SlaveReceive_BTF>
 80040b4:	e004      	b.n	80040c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
 8004122:	4613      	mov	r3, r2
 8004124:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ac:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d150      	bne.n	800425e <I2C_MasterTransmit_TXE+0xc8>
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b21      	cmp	r3, #33	; 0x21
 80041c0:	d14d      	bne.n	800425e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d01d      	beq.n	8004204 <I2C_MasterTransmit_TXE+0x6e>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d01a      	beq.n	8004204 <I2C_MasterTransmit_TXE+0x6e>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041d4:	d016      	beq.n	8004204 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041e4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2211      	movs	r2, #17
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff ff62 	bl	80040c6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004202:	e060      	b.n	80042c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004212:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004222:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d107      	bne.n	800424e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff ff7d 	bl	8004146 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800424c:	e03b      	b.n	80042c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ff35 	bl	80040c6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800425c:	e033      	b.n	80042c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b21      	cmp	r3, #33	; 0x21
 8004262:	d005      	beq.n	8004270 <I2C_MasterTransmit_TXE+0xda>
 8004264:	7bbb      	ldrb	r3, [r7, #14]
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d12d      	bne.n	80042c6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b22      	cmp	r3, #34	; 0x22
 800426e:	d12a      	bne.n	80042c6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d108      	bne.n	800428c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004288:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800428a:	e01c      	b.n	80042c6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d103      	bne.n	80042a0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f88e 	bl	80043ba <I2C_MemoryTransmit_TXE_BTF>
}
 800429e:	e012      	b.n	80042c6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042c4:	e7ff      	b.n	80042c6 <I2C_MasterTransmit_TXE+0x130>
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b21      	cmp	r3, #33	; 0x21
 80042e6:	d164      	bne.n	80043b2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d012      	beq.n	8004318 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004316:	e04c      	b.n	80043b2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b08      	cmp	r3, #8
 800431c:	d01d      	beq.n	800435a <I2C_MasterTransmit_BTF+0x8c>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b20      	cmp	r3, #32
 8004322:	d01a      	beq.n	800435a <I2C_MasterTransmit_BTF+0x8c>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800432a:	d016      	beq.n	800435a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800433a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2211      	movs	r2, #17
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff feb7 	bl	80040c6 <HAL_I2C_MasterTxCpltCallback>
}
 8004358:	e02b      	b.n	80043b2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004368:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004378:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d107      	bne.n	80043a4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fed2 	bl	8004146 <HAL_I2C_MemTxCpltCallback>
}
 80043a2:	e006      	b.n	80043b2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff fe8a 	bl	80040c6 <HAL_I2C_MasterTxCpltCallback>
}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11d      	bne.n	800440e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10b      	bne.n	80043f2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80043f0:	e073      	b.n	80044da <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	121b      	asrs	r3, r3, #8
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800440c:	e065      	b.n	80044da <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10b      	bne.n	800442e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441a:	b2da      	uxtb	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800442c:	e055      	b.n	80044da <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004432:	2b02      	cmp	r3, #2
 8004434:	d151      	bne.n	80044da <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b22      	cmp	r3, #34	; 0x22
 800443a:	d10d      	bne.n	8004458 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800444a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004456:	e040      	b.n	80044da <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d015      	beq.n	800448e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	2b21      	cmp	r3, #33	; 0x21
 8004466:	d112      	bne.n	800448e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800448c:	e025      	b.n	80044da <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d120      	bne.n	80044da <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b21      	cmp	r3, #33	; 0x21
 800449c:	d11d      	bne.n	80044da <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044ac:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044bc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff fe36 	bl	8004146 <HAL_I2C_MemTxCpltCallback>
}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b22      	cmp	r3, #34	; 0x22
 80044f4:	f040 80ac 	bne.w	8004650 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d921      	bls.n	800454a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b03      	cmp	r3, #3
 8004534:	f040 808c 	bne.w	8004650 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004548:	e082      	b.n	8004650 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	2b02      	cmp	r3, #2
 8004550:	d075      	beq.n	800463e <I2C_MasterReceive_RXNE+0x15c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d002      	beq.n	800455e <I2C_MasterReceive_RXNE+0x7c>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d16f      	bne.n	800463e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f001 fa60 	bl	8005a24 <I2C_WaitOnSTOPRequestThroughIT>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d142      	bne.n	80045f0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004588:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d10a      	bne.n	80045da <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fdc1 	bl	800415a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045d8:	e03a      	b.n	8004650 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2212      	movs	r2, #18
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fd76 	bl	80040da <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045ee:	e02f      	b.n	8004650 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff fd99 	bl	800416e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800463c:	e008      	b.n	8004650 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464c:	605a      	str	r2, [r3, #4]
}
 800464e:	e7ff      	b.n	8004650 <I2C_MasterReceive_RXNE+0x16e>
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b04      	cmp	r3, #4
 800466e:	d11b      	bne.n	80046a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80046a6:	e0bd      	b.n	8004824 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d129      	bne.n	8004706 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d00a      	beq.n	80046de <I2C_MasterReceive_BTF+0x86>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d007      	beq.n	80046de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004704:	e08e      	b.n	8004824 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d176      	bne.n	80047fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d002      	beq.n	800471c <I2C_MasterReceive_BTF+0xc4>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b10      	cmp	r3, #16
 800471a:	d108      	bne.n	800472e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	e019      	b.n	8004762 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b04      	cmp	r3, #4
 8004732:	d002      	beq.n	800473a <I2C_MasterReceive_BTF+0xe2>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d108      	bne.n	800474c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e00a      	b.n	8004762 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b10      	cmp	r3, #16
 8004750:	d007      	beq.n	8004762 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004760:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d10a      	bne.n	80047e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fcba 	bl	800415a <HAL_I2C_MemRxCpltCallback>
}
 80047e6:	e01d      	b.n	8004824 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2212      	movs	r2, #18
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff fc6f 	bl	80040da <HAL_I2C_MasterRxCpltCallback>
}
 80047fc:	e012      	b.n	8004824 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d117      	bne.n	8004870 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484c:	b2db      	uxtb	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004858:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800485a:	e067      	b.n	800492c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	b2da      	uxtb	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	611a      	str	r2, [r3, #16]
}
 800486e:	e05d      	b.n	800492c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004878:	d133      	bne.n	80048e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b21      	cmp	r3, #33	; 0x21
 8004884:	d109      	bne.n	800489a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	b2db      	uxtb	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004896:	611a      	str	r2, [r3, #16]
 8004898:	e008      	b.n	80048ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <I2C_Master_SB+0x92>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d032      	beq.n	800492c <I2C_Master_SB+0x100>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d02d      	beq.n	800492c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048de:	605a      	str	r2, [r3, #4]
}
 80048e0:	e024      	b.n	800492c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10e      	bne.n	8004908 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	11db      	asrs	r3, r3, #7
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f003 0306 	and.w	r3, r3, #6
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f063 030f 	orn	r3, r3, #15
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	611a      	str	r2, [r3, #16]
}
 8004906:	e011      	b.n	800492c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10d      	bne.n	800492c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004914:	b29b      	uxth	r3, r3
 8004916:	11db      	asrs	r3, r3, #7
 8004918:	b2db      	uxtb	r3, r3
 800491a:	f003 0306 	and.w	r3, r3, #6
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f063 030e 	orn	r3, r3, #14
 8004924:	b2da      	uxtb	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	611a      	str	r2, [r3, #16]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004944:	b2da      	uxtb	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <I2C_Master_ADD10+0x26>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <I2C_Master_ADD10+0x48>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497e:	605a      	str	r2, [r3, #4]
  }
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800498c:	b480      	push	{r7}
 800498e:	b091      	sub	sp, #68	; 0x44
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b22      	cmp	r3, #34	; 0x22
 80049b4:	f040 8169 	bne.w	8004c8a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10f      	bne.n	80049e0 <I2C_Master_ADDR+0x54>
 80049c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d10b      	bne.n	80049e0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c8:	2300      	movs	r3, #0
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	633b      	str	r3, [r7, #48]	; 0x30
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	633b      	str	r3, [r7, #48]	; 0x30
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	e160      	b.n	8004ca2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d11d      	bne.n	8004a24 <I2C_Master_ADDR+0x98>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049f0:	d118      	bne.n	8004a24 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f2:	2300      	movs	r3, #0
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a16:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	651a      	str	r2, [r3, #80]	; 0x50
 8004a22:	e13e      	b.n	8004ca2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d113      	bne.n	8004a56 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e115      	b.n	8004c82 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	f040 808a 	bne.w	8004b76 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a68:	d137      	bne.n	8004ada <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a78:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a88:	d113      	bne.n	8004ab2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a98:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	e0e7      	b.n	8004c82 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	623b      	str	r3, [r7, #32]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	623b      	str	r3, [r7, #32]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	623b      	str	r3, [r7, #32]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e0d3      	b.n	8004c82 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d02e      	beq.n	8004b3e <I2C_Master_ADDR+0x1b2>
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d02b      	beq.n	8004b3e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	2b12      	cmp	r3, #18
 8004aea:	d102      	bne.n	8004af2 <I2C_Master_ADDR+0x166>
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d125      	bne.n	8004b3e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d00e      	beq.n	8004b16 <I2C_Master_ADDR+0x18a>
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d00b      	beq.n	8004b16 <I2C_Master_ADDR+0x18a>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d008      	beq.n	8004b16 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e007      	b.n	8004b26 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b24:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	e0a1      	b.n	8004c82 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e085      	b.n	8004c82 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d14d      	bne.n	8004c1c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d016      	beq.n	8004bb4 <I2C_Master_ADDR+0x228>
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d013      	beq.n	8004bb4 <I2C_Master_ADDR+0x228>
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d010      	beq.n	8004bb4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e007      	b.n	8004bc4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bc2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd2:	d117      	bne.n	8004c04 <I2C_Master_ADDR+0x278>
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bda:	d00b      	beq.n	8004bf4 <I2C_Master_ADDR+0x268>
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d008      	beq.n	8004bf4 <I2C_Master_ADDR+0x268>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d005      	beq.n	8004bf4 <I2C_Master_ADDR+0x268>
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	d002      	beq.n	8004bf4 <I2C_Master_ADDR+0x268>
 8004bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d107      	bne.n	8004c04 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c02:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	e032      	b.n	8004c82 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c2a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3a:	d117      	bne.n	8004c6c <I2C_Master_ADDR+0x2e0>
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c42:	d00b      	beq.n	8004c5c <I2C_Master_ADDR+0x2d0>
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d008      	beq.n	8004c5c <I2C_Master_ADDR+0x2d0>
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d005      	beq.n	8004c5c <I2C_Master_ADDR+0x2d0>
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d002      	beq.n	8004c5c <I2C_Master_ADDR+0x2d0>
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d107      	bne.n	8004c6c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c6a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c88:	e00b      	b.n	8004ca2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ca0:	e7ff      	b.n	8004ca2 <I2C_Master_ADDR+0x316>
 8004ca2:	bf00      	nop
 8004ca4:	3744      	adds	r7, #68	; 0x44
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02b      	beq.n	8004d20 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d114      	bne.n	8004d20 <I2C_SlaveTransmit_TXE+0x72>
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	2b29      	cmp	r3, #41	; 0x29
 8004cfa:	d111      	bne.n	8004d20 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2221      	movs	r2, #33	; 0x21
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2228      	movs	r2, #40	; 0x28
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff f9e7 	bl	80040ee <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d011      	beq.n	8004d5e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	781a      	ldrb	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d02c      	beq.n	8004dde <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d114      	bne.n	8004dde <I2C_SlaveReceive_RXNE+0x74>
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b2a      	cmp	r3, #42	; 0x2a
 8004db8:	d111      	bne.n	8004dde <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2222      	movs	r2, #34	; 0x22
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2228      	movs	r2, #40	; 0x28
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff f992 	bl	8004102 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d012      	beq.n	8004e1e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e44:	2b28      	cmp	r3, #40	; 0x28
 8004e46:	d127      	bne.n	8004e98 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e56:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	09db      	lsrs	r3, r3, #7
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d103      	bne.n	8004e7c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	81bb      	strh	r3, [r7, #12]
 8004e7a:	e002      	b.n	8004e82 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e8a:	89ba      	ldrh	r2, [r7, #12]
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff f940 	bl	8004116 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e96:	e00e      	b.n	8004eb6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ece:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ede:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1c:	d172      	bne.n	8005004 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b22      	cmp	r3, #34	; 0x22
 8004f22:	d002      	beq.n	8004f2a <I2C_Slave_STOPF+0x6a>
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	2b2a      	cmp	r3, #42	; 0x2a
 8004f28:	d135      	bne.n	8004f96 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	f043 0204 	orr.w	r2, r3, #4
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fc fcf1 	bl	800194a <HAL_DMA_GetState>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d049      	beq.n	8005002 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f72:	4a69      	ldr	r2, [pc, #420]	; (8005118 <I2C_Slave_STOPF+0x258>)
 8004f74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fc fcc3 	bl	8001906 <HAL_DMA_Abort_IT>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d03d      	beq.n	8005002 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f90:	4610      	mov	r0, r2
 8004f92:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f94:	e035      	b.n	8005002 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f043 0204 	orr.w	r2, r3, #4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fc fcbb 	bl	800194a <HAL_DMA_GetState>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d014      	beq.n	8005004 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	4a4e      	ldr	r2, [pc, #312]	; (8005118 <I2C_Slave_STOPF+0x258>)
 8004fe0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fc fc8d 	bl	8001906 <HAL_DMA_Abort_IT>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4798      	blx	r3
 8005000:	e000      	b.n	8005004 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005002:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d03e      	beq.n	800508c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d112      	bne.n	8005042 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d112      	bne.n	8005076 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	f043 0204 	orr.w	r2, r3, #4
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f843 	bl	8005120 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800509a:	e039      	b.n	8005110 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b2a      	cmp	r3, #42	; 0x2a
 80050a0:	d109      	bne.n	80050b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2228      	movs	r2, #40	; 0x28
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff f826 	bl	8004102 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b28      	cmp	r3, #40	; 0x28
 80050c0:	d111      	bne.n	80050e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a15      	ldr	r2, [pc, #84]	; (800511c <I2C_Slave_STOPF+0x25c>)
 80050c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff f827 	bl	8004132 <HAL_I2C_ListenCpltCallback>
}
 80050e4:	e014      	b.n	8005110 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	2b22      	cmp	r3, #34	; 0x22
 80050ec:	d002      	beq.n	80050f4 <I2C_Slave_STOPF+0x234>
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b22      	cmp	r3, #34	; 0x22
 80050f2:	d10d      	bne.n	8005110 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fe fff9 	bl	8004102 <HAL_I2C_SlaveRxCpltCallback>
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	08005625 	.word	0x08005625
 800511c:	ffff0000 	.word	0xffff0000

08005120 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005136:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	2b10      	cmp	r3, #16
 800513c:	d002      	beq.n	8005144 <I2C_ITError+0x24>
 800513e:	7bbb      	ldrb	r3, [r7, #14]
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d10a      	bne.n	800515a <I2C_ITError+0x3a>
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b22      	cmp	r3, #34	; 0x22
 8005148:	d107      	bne.n	800515a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005158:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005160:	2b28      	cmp	r3, #40	; 0x28
 8005162:	d107      	bne.n	8005174 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2228      	movs	r2, #40	; 0x28
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005172:	e015      	b.n	80051a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d00a      	beq.n	800519a <I2C_ITError+0x7a>
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	2b60      	cmp	r3, #96	; 0x60
 8005188:	d007      	beq.n	800519a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ae:	d162      	bne.n	8005276 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d020      	beq.n	8005210 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d2:	4a6a      	ldr	r2, [pc, #424]	; (800537c <I2C_ITError+0x25c>)
 80051d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fc fb93 	bl	8001906 <HAL_DMA_Abort_IT>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 8089 	beq.w	80052fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800520a:	4610      	mov	r0, r2
 800520c:	4798      	blx	r3
 800520e:	e074      	b.n	80052fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	4a59      	ldr	r2, [pc, #356]	; (800537c <I2C_ITError+0x25c>)
 8005216:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	4618      	mov	r0, r3
 800521e:	f7fc fb72 	bl	8001906 <HAL_DMA_Abort_IT>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d068      	beq.n	80052fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d10b      	bne.n	800524e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005270:	4610      	mov	r0, r2
 8005272:	4798      	blx	r3
 8005274:	e041      	b.n	80052fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b60      	cmp	r3, #96	; 0x60
 8005280:	d125      	bne.n	80052ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529a:	2b40      	cmp	r3, #64	; 0x40
 800529c:	d10b      	bne.n	80052b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fe ff5b 	bl	8004182 <HAL_I2C_AbortCpltCallback>
 80052cc:	e015      	b.n	80052fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d10b      	bne.n	80052f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fe ff3a 	bl	800416e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10e      	bne.n	8005328 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005336:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b04      	cmp	r3, #4
 800534a:	d113      	bne.n	8005374 <I2C_ITError+0x254>
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b28      	cmp	r3, #40	; 0x28
 8005350:	d110      	bne.n	8005374 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a0a      	ldr	r2, [pc, #40]	; (8005380 <I2C_ITError+0x260>)
 8005356:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fe fedf 	bl	8004132 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	08005625 	.word	0x08005625
 8005380:	ffff0000 	.word	0xffff0000

08005384 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	460b      	mov	r3, r1
 8005392:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d006      	beq.n	80053ae <I2C_MasterRequestWrite+0x2a>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d003      	beq.n	80053ae <I2C_MasterRequestWrite+0x2a>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053ac:	d108      	bne.n	80053c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	e00b      	b.n	80053d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	2b12      	cmp	r3, #18
 80053c6:	d107      	bne.n	80053d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f9c5 	bl	8005774 <I2C_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00d      	beq.n	800540c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fe:	d103      	bne.n	8005408 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e035      	b.n	8005478 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005414:	d108      	bne.n	8005428 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005416:	897b      	ldrh	r3, [r7, #10]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005424:	611a      	str	r2, [r3, #16]
 8005426:	e01b      	b.n	8005460 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005428:	897b      	ldrh	r3, [r7, #10]
 800542a:	11db      	asrs	r3, r3, #7
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 0306 	and.w	r3, r3, #6
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f063 030f 	orn	r3, r3, #15
 8005438:	b2da      	uxtb	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	490e      	ldr	r1, [pc, #56]	; (8005480 <I2C_MasterRequestWrite+0xfc>)
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f9eb 	bl	8005822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e010      	b.n	8005478 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005456:	897b      	ldrh	r3, [r7, #10]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4907      	ldr	r1, [pc, #28]	; (8005484 <I2C_MasterRequestWrite+0x100>)
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f9db 	bl	8005822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	00010008 	.word	0x00010008
 8005484:	00010002 	.word	0x00010002

08005488 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	460b      	mov	r3, r1
 8005496:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d006      	beq.n	80054c2 <I2C_MasterRequestRead+0x3a>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d003      	beq.n	80054c2 <I2C_MasterRequestRead+0x3a>
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054c0:	d108      	bne.n	80054d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	e00b      	b.n	80054ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	2b11      	cmp	r3, #17
 80054da:	d107      	bne.n	80054ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f93b 	bl	8005774 <I2C_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005512:	d103      	bne.n	800551c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e079      	b.n	8005614 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005528:	d108      	bne.n	800553c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800552a:	897b      	ldrh	r3, [r7, #10]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	b2da      	uxtb	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	611a      	str	r2, [r3, #16]
 800553a:	e05f      	b.n	80055fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800553c:	897b      	ldrh	r3, [r7, #10]
 800553e:	11db      	asrs	r3, r3, #7
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f003 0306 	and.w	r3, r3, #6
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f063 030f 	orn	r3, r3, #15
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	4930      	ldr	r1, [pc, #192]	; (800561c <I2C_MasterRequestRead+0x194>)
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f961 	bl	8005822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e054      	b.n	8005614 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800556a:	897b      	ldrh	r3, [r7, #10]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	4929      	ldr	r1, [pc, #164]	; (8005620 <I2C_MasterRequestRead+0x198>)
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f951 	bl	8005822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e044      	b.n	8005614 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f8d9 	bl	8005774 <I2C_WaitOnFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00d      	beq.n	80055e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d6:	d103      	bne.n	80055e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e017      	b.n	8005614 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80055e4:	897b      	ldrh	r3, [r7, #10]
 80055e6:	11db      	asrs	r3, r3, #7
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 0306 	and.w	r3, r3, #6
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f063 030e 	orn	r3, r3, #14
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4907      	ldr	r1, [pc, #28]	; (8005620 <I2C_MasterRequestRead+0x198>)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f90d 	bl	8005822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	00010008 	.word	0x00010008
 8005620:	00010002 	.word	0x00010002

08005624 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800563e:	4b4b      	ldr	r3, [pc, #300]	; (800576c <I2C_DMAAbort+0x148>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	08db      	lsrs	r3, r3, #3
 8005644:	4a4a      	ldr	r2, [pc, #296]	; (8005770 <I2C_DMAAbort+0x14c>)
 8005646:	fba2 2303 	umull	r2, r3, r2, r3
 800564a:	0a1a      	lsrs	r2, r3, #8
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	00da      	lsls	r2, r3, #3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800566a:	e00a      	b.n	8005682 <I2C_DMAAbort+0x5e>
    }
    count--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3b01      	subs	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005680:	d0ea      	beq.n	8005658 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	2200      	movs	r2, #0
 8005690:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	2200      	movs	r2, #0
 80056a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	2200      	movs	r2, #0
 80056c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	2200      	movs	r2, #0
 80056d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b60      	cmp	r3, #96	; 0x60
 80056f2:	d10e      	bne.n	8005712 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800570a:	6978      	ldr	r0, [r7, #20]
 800570c:	f7fe fd39 	bl	8004182 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005710:	e027      	b.n	8005762 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005712:	7cfb      	ldrb	r3, [r7, #19]
 8005714:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005718:	2b28      	cmp	r3, #40	; 0x28
 800571a:	d117      	bne.n	800574c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800573a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2200      	movs	r2, #0
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2228      	movs	r2, #40	; 0x28
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800574a:	e007      	b.n	800575c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800575c:	6978      	ldr	r0, [r7, #20]
 800575e:	f7fe fd06 	bl	800416e <HAL_I2C_ErrorCallback>
}
 8005762:	bf00      	nop
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000000 	.word	0x20000000
 8005770:	14f8b589 	.word	0x14f8b589

08005774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005784:	e025      	b.n	80057d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578c:	d021      	beq.n	80057d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578e:	f7fb ff79 	bl	8001684 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d302      	bcc.n	80057a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d116      	bne.n	80057d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f043 0220 	orr.w	r2, r3, #32
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e023      	b.n	800581a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d10d      	bne.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	43da      	mvns	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4013      	ands	r3, r2
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf0c      	ite	eq
 80057ee:	2301      	moveq	r3, #1
 80057f0:	2300      	movne	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	e00c      	b.n	8005812 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	43da      	mvns	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4013      	ands	r3, r2
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	bf0c      	ite	eq
 800580a:	2301      	moveq	r3, #1
 800580c:	2300      	movne	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	429a      	cmp	r2, r3
 8005816:	d0b6      	beq.n	8005786 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	607a      	str	r2, [r7, #4]
 800582e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005830:	e051      	b.n	80058d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005840:	d123      	bne.n	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005850:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800585a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f043 0204 	orr.w	r2, r3, #4
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e046      	b.n	8005918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005890:	d021      	beq.n	80058d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005892:	f7fb fef7 	bl	8001684 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d302      	bcc.n	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d116      	bne.n	80058d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f043 0220 	orr.w	r2, r3, #32
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e020      	b.n	8005918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	0c1b      	lsrs	r3, r3, #16
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d10c      	bne.n	80058fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bf14      	ite	ne
 80058f2:	2301      	movne	r3, #1
 80058f4:	2300      	moveq	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	e00b      	b.n	8005912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	43da      	mvns	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4013      	ands	r3, r2
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d18d      	bne.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800592c:	e02d      	b.n	800598a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f900 	bl	8005b34 <I2C_IsAcknowledgeFailed>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e02d      	b.n	800599a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005944:	d021      	beq.n	800598a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005946:	f7fb fe9d 	bl	8001684 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	d302      	bcc.n	800595c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d116      	bne.n	800598a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f043 0220 	orr.w	r2, r3, #32
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e007      	b.n	800599a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005994:	2b80      	cmp	r3, #128	; 0x80
 8005996:	d1ca      	bne.n	800592e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059ae:	e02d      	b.n	8005a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f8bf 	bl	8005b34 <I2C_IsAcknowledgeFailed>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e02d      	b.n	8005a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059c6:	d021      	beq.n	8005a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c8:	f7fb fe5c 	bl	8001684 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d302      	bcc.n	80059de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d116      	bne.n	8005a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e007      	b.n	8005a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d1ca      	bne.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a30:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	08db      	lsrs	r3, r3, #3
 8005a36:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005a38:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3c:	0a1a      	lsrs	r2, r3, #8
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d107      	bne.n	8005a62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f043 0220 	orr.w	r2, r3, #32
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e008      	b.n	8005a74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a70:	d0e9      	beq.n	8005a46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	20000000 	.word	0x20000000
 8005a84:	14f8b589 	.word	0x14f8b589

08005a88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a94:	e042      	b.n	8005b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b10      	cmp	r3, #16
 8005aa2:	d119      	bne.n	8005ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0210 	mvn.w	r2, #16
 8005aac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e029      	b.n	8005b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad8:	f7fb fdd4 	bl	8001684 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d302      	bcc.n	8005aee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d116      	bne.n	8005b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f043 0220 	orr.w	r2, r3, #32
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e007      	b.n	8005b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d1b5      	bne.n	8005a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4a:	d11b      	bne.n	8005b84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	f043 0204 	orr.w	r2, r3, #4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ba2:	d103      	bne.n	8005bac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005baa:	e007      	b.n	8005bbc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005bb4:	d102      	bne.n	8005bbc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2208      	movs	r2, #8
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e267      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d075      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005be6:	4b88      	ldr	r3, [pc, #544]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 030c 	and.w	r3, r3, #12
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d00c      	beq.n	8005c0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bf2:	4b85      	ldr	r3, [pc, #532]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d112      	bne.n	8005c24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bfe:	4b82      	ldr	r3, [pc, #520]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c0a:	d10b      	bne.n	8005c24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c0c:	4b7e      	ldr	r3, [pc, #504]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d05b      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x108>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d157      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e242      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2c:	d106      	bne.n	8005c3c <HAL_RCC_OscConfig+0x74>
 8005c2e:	4b76      	ldr	r3, [pc, #472]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a75      	ldr	r2, [pc, #468]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	e01d      	b.n	8005c78 <HAL_RCC_OscConfig+0xb0>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c44:	d10c      	bne.n	8005c60 <HAL_RCC_OscConfig+0x98>
 8005c46:	4b70      	ldr	r3, [pc, #448]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6f      	ldr	r2, [pc, #444]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	4b6d      	ldr	r3, [pc, #436]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a6c      	ldr	r2, [pc, #432]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	e00b      	b.n	8005c78 <HAL_RCC_OscConfig+0xb0>
 8005c60:	4b69      	ldr	r3, [pc, #420]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a68      	ldr	r2, [pc, #416]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	4b66      	ldr	r3, [pc, #408]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a65      	ldr	r2, [pc, #404]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d013      	beq.n	8005ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c80:	f7fb fd00 	bl	8001684 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c88:	f7fb fcfc 	bl	8001684 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b64      	cmp	r3, #100	; 0x64
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e207      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9a:	4b5b      	ldr	r3, [pc, #364]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0xc0>
 8005ca6:	e014      	b.n	8005cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca8:	f7fb fcec 	bl	8001684 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cb0:	f7fb fce8 	bl	8001684 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b64      	cmp	r3, #100	; 0x64
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e1f3      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc2:	4b51      	ldr	r3, [pc, #324]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0xe8>
 8005cce:	e000      	b.n	8005cd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d063      	beq.n	8005da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cde:	4b4a      	ldr	r3, [pc, #296]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cea:	4b47      	ldr	r3, [pc, #284]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d11c      	bne.n	8005d30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cf6:	4b44      	ldr	r3, [pc, #272]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d116      	bne.n	8005d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_RCC_OscConfig+0x152>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d001      	beq.n	8005d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e1c7      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d1a:	4b3b      	ldr	r3, [pc, #236]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	4937      	ldr	r1, [pc, #220]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d2e:	e03a      	b.n	8005da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d020      	beq.n	8005d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d38:	4b34      	ldr	r3, [pc, #208]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3e:	f7fb fca1 	bl	8001684 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d46:	f7fb fc9d 	bl	8001684 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e1a8      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d58:	4b2b      	ldr	r3, [pc, #172]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d64:	4b28      	ldr	r3, [pc, #160]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4925      	ldr	r1, [pc, #148]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	600b      	str	r3, [r1, #0]
 8005d78:	e015      	b.n	8005da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d7a:	4b24      	ldr	r3, [pc, #144]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d80:	f7fb fc80 	bl	8001684 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d88:	f7fb fc7c 	bl	8001684 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e187      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9a:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d036      	beq.n	8005e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dba:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <HAL_RCC_OscConfig+0x248>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc0:	f7fb fc60 	bl	8001684 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dc8:	f7fb fc5c 	bl	8001684 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e167      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dda:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x200>
 8005de6:	e01b      	b.n	8005e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de8:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <HAL_RCC_OscConfig+0x248>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dee:	f7fb fc49 	bl	8001684 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df4:	e00e      	b.n	8005e14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005df6:	f7fb fc45 	bl	8001684 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d907      	bls.n	8005e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e150      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	42470000 	.word	0x42470000
 8005e10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e14:	4b88      	ldr	r3, [pc, #544]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1ea      	bne.n	8005df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8097 	beq.w	8005f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e32:	4b81      	ldr	r3, [pc, #516]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10f      	bne.n	8005e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	4b7d      	ldr	r3, [pc, #500]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	4a7c      	ldr	r2, [pc, #496]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e4e:	4b7a      	ldr	r3, [pc, #488]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e56:	60bb      	str	r3, [r7, #8]
 8005e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5e:	4b77      	ldr	r3, [pc, #476]	; (800603c <HAL_RCC_OscConfig+0x474>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d118      	bne.n	8005e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e6a:	4b74      	ldr	r3, [pc, #464]	; (800603c <HAL_RCC_OscConfig+0x474>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a73      	ldr	r2, [pc, #460]	; (800603c <HAL_RCC_OscConfig+0x474>)
 8005e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e76:	f7fb fc05 	bl	8001684 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e7c:	e008      	b.n	8005e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7e:	f7fb fc01 	bl	8001684 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e10c      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e90:	4b6a      	ldr	r3, [pc, #424]	; (800603c <HAL_RCC_OscConfig+0x474>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f0      	beq.n	8005e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d106      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x2ea>
 8005ea4:	4b64      	ldr	r3, [pc, #400]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea8:	4a63      	ldr	r2, [pc, #396]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005eaa:	f043 0301 	orr.w	r3, r3, #1
 8005eae:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb0:	e01c      	b.n	8005eec <HAL_RCC_OscConfig+0x324>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x30c>
 8005eba:	4b5f      	ldr	r3, [pc, #380]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	4a5e      	ldr	r2, [pc, #376]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	f043 0304 	orr.w	r3, r3, #4
 8005ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec6:	4b5c      	ldr	r3, [pc, #368]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	4a5b      	ldr	r2, [pc, #364]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed2:	e00b      	b.n	8005eec <HAL_RCC_OscConfig+0x324>
 8005ed4:	4b58      	ldr	r3, [pc, #352]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed8:	4a57      	ldr	r2, [pc, #348]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee0:	4b55      	ldr	r3, [pc, #340]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee4:	4a54      	ldr	r2, [pc, #336]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ee6:	f023 0304 	bic.w	r3, r3, #4
 8005eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d015      	beq.n	8005f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef4:	f7fb fbc6 	bl	8001684 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005efc:	f7fb fbc2 	bl	8001684 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e0cb      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f12:	4b49      	ldr	r3, [pc, #292]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0ee      	beq.n	8005efc <HAL_RCC_OscConfig+0x334>
 8005f1e:	e014      	b.n	8005f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f20:	f7fb fbb0 	bl	8001684 <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f26:	e00a      	b.n	8005f3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f28:	f7fb fbac 	bl	8001684 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e0b5      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3e:	4b3e      	ldr	r3, [pc, #248]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1ee      	bne.n	8005f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d105      	bne.n	8005f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f50:	4b39      	ldr	r3, [pc, #228]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	4a38      	ldr	r2, [pc, #224]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 80a1 	beq.w	80060a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f66:	4b34      	ldr	r3, [pc, #208]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 030c 	and.w	r3, r3, #12
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d05c      	beq.n	800602c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d141      	bne.n	8005ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7a:	4b31      	ldr	r3, [pc, #196]	; (8006040 <HAL_RCC_OscConfig+0x478>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f80:	f7fb fb80 	bl	8001684 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f88:	f7fb fb7c 	bl	8001684 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e087      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9a:	4b27      	ldr	r3, [pc, #156]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	019b      	lsls	r3, r3, #6
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	041b      	lsls	r3, r3, #16
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	061b      	lsls	r3, r3, #24
 8005fca:	491b      	ldr	r1, [pc, #108]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fd0:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <HAL_RCC_OscConfig+0x478>)
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd6:	f7fb fb55 	bl	8001684 <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fde:	f7fb fb51 	bl	8001684 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e05c      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0f0      	beq.n	8005fde <HAL_RCC_OscConfig+0x416>
 8005ffc:	e054      	b.n	80060a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffe:	4b10      	ldr	r3, [pc, #64]	; (8006040 <HAL_RCC_OscConfig+0x478>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006004:	f7fb fb3e 	bl	8001684 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800600c:	f7fb fb3a 	bl	8001684 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e045      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_RCC_OscConfig+0x470>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x444>
 800602a:	e03d      	b.n	80060a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d107      	bne.n	8006044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e038      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
 8006038:	40023800 	.word	0x40023800
 800603c:	40007000 	.word	0x40007000
 8006040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006044:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <HAL_RCC_OscConfig+0x4ec>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d028      	beq.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800605c:	429a      	cmp	r2, r3
 800605e:	d121      	bne.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800606a:	429a      	cmp	r2, r3
 800606c:	d11a      	bne.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006074:	4013      	ands	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800607a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800607c:	4293      	cmp	r3, r2
 800607e:	d111      	bne.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	085b      	lsrs	r3, r3, #1
 800608c:	3b01      	subs	r3, #1
 800608e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006090:	429a      	cmp	r2, r3
 8006092:	d107      	bne.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d001      	beq.n	80060a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40023800 	.word	0x40023800

080060b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0cc      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060cc:	4b68      	ldr	r3, [pc, #416]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d90c      	bls.n	80060f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060da:	4b65      	ldr	r3, [pc, #404]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e2:	4b63      	ldr	r3, [pc, #396]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0b8      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d020      	beq.n	8006142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800610c:	4b59      	ldr	r3, [pc, #356]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4a58      	ldr	r2, [pc, #352]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006124:	4b53      	ldr	r3, [pc, #332]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4a52      	ldr	r2, [pc, #328]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800612e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006130:	4b50      	ldr	r3, [pc, #320]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	494d      	ldr	r1, [pc, #308]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d044      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d107      	bne.n	8006166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006156:	4b47      	ldr	r3, [pc, #284]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d119      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e07f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d003      	beq.n	8006176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006172:	2b03      	cmp	r3, #3
 8006174:	d107      	bne.n	8006186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006176:	4b3f      	ldr	r3, [pc, #252]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e06f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006186:	4b3b      	ldr	r3, [pc, #236]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e067      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006196:	4b37      	ldr	r3, [pc, #220]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f023 0203 	bic.w	r2, r3, #3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4934      	ldr	r1, [pc, #208]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061a8:	f7fb fa6c 	bl	8001684 <HAL_GetTick>
 80061ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ae:	e00a      	b.n	80061c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b0:	f7fb fa68 	bl	8001684 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80061be:	4293      	cmp	r3, r2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e04f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c6:	4b2b      	ldr	r3, [pc, #172]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 020c 	and.w	r2, r3, #12
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d1eb      	bne.n	80061b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061d8:	4b25      	ldr	r3, [pc, #148]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d20c      	bcs.n	8006200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4b22      	ldr	r3, [pc, #136]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e032      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800620c:	4b19      	ldr	r3, [pc, #100]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4916      	ldr	r1, [pc, #88]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	4313      	orrs	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	490e      	ldr	r1, [pc, #56]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	4313      	orrs	r3, r2
 800623c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800623e:	f000 f821 	bl	8006284 <HAL_RCC_GetSysClockFreq>
 8006242:	4602      	mov	r2, r0
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	490a      	ldr	r1, [pc, #40]	; (8006278 <HAL_RCC_ClockConfig+0x1c0>)
 8006250:	5ccb      	ldrb	r3, [r1, r3]
 8006252:	fa22 f303 	lsr.w	r3, r2, r3
 8006256:	4a09      	ldr	r2, [pc, #36]	; (800627c <HAL_RCC_ClockConfig+0x1c4>)
 8006258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <HAL_RCC_ClockConfig+0x1c8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f7fb f9cc 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40023c00 	.word	0x40023c00
 8006274:	40023800 	.word	0x40023800
 8006278:	0800963c 	.word	0x0800963c
 800627c:	20000000 	.word	0x20000000
 8006280:	20000004 	.word	0x20000004

08006284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006288:	b094      	sub	sp, #80	; 0x50
 800628a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	647b      	str	r3, [r7, #68]	; 0x44
 8006290:	2300      	movs	r3, #0
 8006292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006294:	2300      	movs	r3, #0
 8006296:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800629c:	4b79      	ldr	r3, [pc, #484]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 030c 	and.w	r3, r3, #12
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d00d      	beq.n	80062c4 <HAL_RCC_GetSysClockFreq+0x40>
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	f200 80e1 	bhi.w	8006470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_RCC_GetSysClockFreq+0x34>
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d003      	beq.n	80062be <HAL_RCC_GetSysClockFreq+0x3a>
 80062b6:	e0db      	b.n	8006470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b8:	4b73      	ldr	r3, [pc, #460]	; (8006488 <HAL_RCC_GetSysClockFreq+0x204>)
 80062ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80062bc:	e0db      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062be:	4b73      	ldr	r3, [pc, #460]	; (800648c <HAL_RCC_GetSysClockFreq+0x208>)
 80062c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062c2:	e0d8      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c4:	4b6f      	ldr	r3, [pc, #444]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062ce:	4b6d      	ldr	r3, [pc, #436]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d063      	beq.n	80063a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062da:	4b6a      	ldr	r3, [pc, #424]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	099b      	lsrs	r3, r3, #6
 80062e0:	2200      	movs	r2, #0
 80062e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80062e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ec:	633b      	str	r3, [r7, #48]	; 0x30
 80062ee:	2300      	movs	r3, #0
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
 80062f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062f6:	4622      	mov	r2, r4
 80062f8:	462b      	mov	r3, r5
 80062fa:	f04f 0000 	mov.w	r0, #0
 80062fe:	f04f 0100 	mov.w	r1, #0
 8006302:	0159      	lsls	r1, r3, #5
 8006304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006308:	0150      	lsls	r0, r2, #5
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4621      	mov	r1, r4
 8006310:	1a51      	subs	r1, r2, r1
 8006312:	6139      	str	r1, [r7, #16]
 8006314:	4629      	mov	r1, r5
 8006316:	eb63 0301 	sbc.w	r3, r3, r1
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006328:	4659      	mov	r1, fp
 800632a:	018b      	lsls	r3, r1, #6
 800632c:	4651      	mov	r1, sl
 800632e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006332:	4651      	mov	r1, sl
 8006334:	018a      	lsls	r2, r1, #6
 8006336:	4651      	mov	r1, sl
 8006338:	ebb2 0801 	subs.w	r8, r2, r1
 800633c:	4659      	mov	r1, fp
 800633e:	eb63 0901 	sbc.w	r9, r3, r1
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800634e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006356:	4690      	mov	r8, r2
 8006358:	4699      	mov	r9, r3
 800635a:	4623      	mov	r3, r4
 800635c:	eb18 0303 	adds.w	r3, r8, r3
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	462b      	mov	r3, r5
 8006364:	eb49 0303 	adc.w	r3, r9, r3
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006376:	4629      	mov	r1, r5
 8006378:	024b      	lsls	r3, r1, #9
 800637a:	4621      	mov	r1, r4
 800637c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006380:	4621      	mov	r1, r4
 8006382:	024a      	lsls	r2, r1, #9
 8006384:	4610      	mov	r0, r2
 8006386:	4619      	mov	r1, r3
 8006388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638a:	2200      	movs	r2, #0
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
 800638e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006394:	f7fa f8d4 	bl	8000540 <__aeabi_uldivmod>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4613      	mov	r3, r2
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a0:	e058      	b.n	8006454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063a2:	4b38      	ldr	r3, [pc, #224]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	2200      	movs	r2, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	4611      	mov	r1, r2
 80063ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063b2:	623b      	str	r3, [r7, #32]
 80063b4:	2300      	movs	r3, #0
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
 80063b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	f04f 0000 	mov.w	r0, #0
 80063c4:	f04f 0100 	mov.w	r1, #0
 80063c8:	0159      	lsls	r1, r3, #5
 80063ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063ce:	0150      	lsls	r0, r2, #5
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4641      	mov	r1, r8
 80063d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80063da:	4649      	mov	r1, r9
 80063dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063f4:	ebb2 040a 	subs.w	r4, r2, sl
 80063f8:	eb63 050b 	sbc.w	r5, r3, fp
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	00eb      	lsls	r3, r5, #3
 8006406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800640a:	00e2      	lsls	r2, r4, #3
 800640c:	4614      	mov	r4, r2
 800640e:	461d      	mov	r5, r3
 8006410:	4643      	mov	r3, r8
 8006412:	18e3      	adds	r3, r4, r3
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	464b      	mov	r3, r9
 8006418:	eb45 0303 	adc.w	r3, r5, r3
 800641c:	607b      	str	r3, [r7, #4]
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	f04f 0300 	mov.w	r3, #0
 8006426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800642a:	4629      	mov	r1, r5
 800642c:	028b      	lsls	r3, r1, #10
 800642e:	4621      	mov	r1, r4
 8006430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006434:	4621      	mov	r1, r4
 8006436:	028a      	lsls	r2, r1, #10
 8006438:	4610      	mov	r0, r2
 800643a:	4619      	mov	r1, r3
 800643c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800643e:	2200      	movs	r2, #0
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	61fa      	str	r2, [r7, #28]
 8006444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006448:	f7fa f87a 	bl	8000540 <__aeabi_uldivmod>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4613      	mov	r3, r2
 8006452:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	0c1b      	lsrs	r3, r3, #16
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	3301      	adds	r3, #1
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800646e:	e002      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <HAL_RCC_GetSysClockFreq+0x204>)
 8006472:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006478:	4618      	mov	r0, r3
 800647a:	3750      	adds	r7, #80	; 0x50
 800647c:	46bd      	mov	sp, r7
 800647e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006482:	bf00      	nop
 8006484:	40023800 	.word	0x40023800
 8006488:	00f42400 	.word	0x00f42400
 800648c:	007a1200 	.word	0x007a1200

08006490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006496:	681b      	ldr	r3, [r3, #0]
}
 8006498:	4618      	mov	r0, r3
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000000 	.word	0x20000000

080064a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064ac:	f7ff fff0 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	0a9b      	lsrs	r3, r3, #10
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	4903      	ldr	r1, [pc, #12]	; (80064cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064be:	5ccb      	ldrb	r3, [r1, r3]
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	40023800 	.word	0x40023800
 80064cc:	0800964c 	.word	0x0800964c

080064d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e041      	b.n	8006566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fa ff76 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f000 faa0 	bl	8006a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d001      	beq.n	8006588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e04e      	b.n	8006626 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a23      	ldr	r2, [pc, #140]	; (8006634 <HAL_TIM_Base_Start_IT+0xc4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d022      	beq.n	80065f0 <HAL_TIM_Base_Start_IT+0x80>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d01d      	beq.n	80065f0 <HAL_TIM_Base_Start_IT+0x80>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1f      	ldr	r2, [pc, #124]	; (8006638 <HAL_TIM_Base_Start_IT+0xc8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d018      	beq.n	80065f0 <HAL_TIM_Base_Start_IT+0x80>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1e      	ldr	r2, [pc, #120]	; (800663c <HAL_TIM_Base_Start_IT+0xcc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_TIM_Base_Start_IT+0x80>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <HAL_TIM_Base_Start_IT+0xd0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00e      	beq.n	80065f0 <HAL_TIM_Base_Start_IT+0x80>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1b      	ldr	r2, [pc, #108]	; (8006644 <HAL_TIM_Base_Start_IT+0xd4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_TIM_Base_Start_IT+0x80>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a19      	ldr	r2, [pc, #100]	; (8006648 <HAL_TIM_Base_Start_IT+0xd8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_TIM_Base_Start_IT+0x80>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a18      	ldr	r2, [pc, #96]	; (800664c <HAL_TIM_Base_Start_IT+0xdc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d111      	bne.n	8006614 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b06      	cmp	r3, #6
 8006600:	d010      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006612:	e007      	b.n	8006624 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40010000 	.word	0x40010000
 8006638:	40000400 	.word	0x40000400
 800663c:	40000800 	.word	0x40000800
 8006640:	40000c00 	.word	0x40000c00
 8006644:	40010400 	.word	0x40010400
 8006648:	40014000 	.word	0x40014000
 800664c:	40001800 	.word	0x40001800

08006650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d122      	bne.n	80066ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b02      	cmp	r3, #2
 8006672:	d11b      	bne.n	80066ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0202 	mvn.w	r2, #2
 800667c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f9bf 	bl	8006a16 <HAL_TIM_IC_CaptureCallback>
 8006698:	e005      	b.n	80066a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9b1 	bl	8006a02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f9c2 	bl	8006a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d122      	bne.n	8006700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d11b      	bne.n	8006700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0204 	mvn.w	r2, #4
 80066d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2202      	movs	r2, #2
 80066d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f995 	bl	8006a16 <HAL_TIM_IC_CaptureCallback>
 80066ec:	e005      	b.n	80066fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f987 	bl	8006a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f998 	bl	8006a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b08      	cmp	r3, #8
 800670c:	d122      	bne.n	8006754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b08      	cmp	r3, #8
 800671a:	d11b      	bne.n	8006754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0208 	mvn.w	r2, #8
 8006724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2204      	movs	r2, #4
 800672a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f96b 	bl	8006a16 <HAL_TIM_IC_CaptureCallback>
 8006740:	e005      	b.n	800674e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f95d 	bl	8006a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f96e 	bl	8006a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b10      	cmp	r3, #16
 8006760:	d122      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b10      	cmp	r3, #16
 800676e:	d11b      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0210 	mvn.w	r2, #16
 8006778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2208      	movs	r2, #8
 800677e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f941 	bl	8006a16 <HAL_TIM_IC_CaptureCallback>
 8006794:	e005      	b.n	80067a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f933 	bl	8006a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f944 	bl	8006a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d10e      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d107      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0201 	mvn.w	r2, #1
 80067cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f90d 	bl	80069ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067de:	2b80      	cmp	r3, #128	; 0x80
 80067e0:	d10e      	bne.n	8006800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ec:	2b80      	cmp	r3, #128	; 0x80
 80067ee:	d107      	bne.n	8006800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 faea 	bl	8006dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d10e      	bne.n	800682c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	d107      	bne.n	800682c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f909 	bl	8006a3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b20      	cmp	r3, #32
 8006838:	d10e      	bne.n	8006858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b20      	cmp	r3, #32
 8006846:	d107      	bne.n	8006858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0220 	mvn.w	r2, #32
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fab4 	bl	8006dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_TIM_ConfigClockSource+0x1c>
 8006878:	2302      	movs	r3, #2
 800687a:	e0b4      	b.n	80069e6 <HAL_TIM_ConfigClockSource+0x186>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800689a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b4:	d03e      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0xd4>
 80068b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ba:	f200 8087 	bhi.w	80069cc <HAL_TIM_ConfigClockSource+0x16c>
 80068be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c2:	f000 8086 	beq.w	80069d2 <HAL_TIM_ConfigClockSource+0x172>
 80068c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ca:	d87f      	bhi.n	80069cc <HAL_TIM_ConfigClockSource+0x16c>
 80068cc:	2b70      	cmp	r3, #112	; 0x70
 80068ce:	d01a      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0xa6>
 80068d0:	2b70      	cmp	r3, #112	; 0x70
 80068d2:	d87b      	bhi.n	80069cc <HAL_TIM_ConfigClockSource+0x16c>
 80068d4:	2b60      	cmp	r3, #96	; 0x60
 80068d6:	d050      	beq.n	800697a <HAL_TIM_ConfigClockSource+0x11a>
 80068d8:	2b60      	cmp	r3, #96	; 0x60
 80068da:	d877      	bhi.n	80069cc <HAL_TIM_ConfigClockSource+0x16c>
 80068dc:	2b50      	cmp	r3, #80	; 0x50
 80068de:	d03c      	beq.n	800695a <HAL_TIM_ConfigClockSource+0xfa>
 80068e0:	2b50      	cmp	r3, #80	; 0x50
 80068e2:	d873      	bhi.n	80069cc <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b40      	cmp	r3, #64	; 0x40
 80068e6:	d058      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x13a>
 80068e8:	2b40      	cmp	r3, #64	; 0x40
 80068ea:	d86f      	bhi.n	80069cc <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b30      	cmp	r3, #48	; 0x30
 80068ee:	d064      	beq.n	80069ba <HAL_TIM_ConfigClockSource+0x15a>
 80068f0:	2b30      	cmp	r3, #48	; 0x30
 80068f2:	d86b      	bhi.n	80069cc <HAL_TIM_ConfigClockSource+0x16c>
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d060      	beq.n	80069ba <HAL_TIM_ConfigClockSource+0x15a>
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	d867      	bhi.n	80069cc <HAL_TIM_ConfigClockSource+0x16c>
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d05c      	beq.n	80069ba <HAL_TIM_ConfigClockSource+0x15a>
 8006900:	2b10      	cmp	r3, #16
 8006902:	d05a      	beq.n	80069ba <HAL_TIM_ConfigClockSource+0x15a>
 8006904:	e062      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	6899      	ldr	r1, [r3, #8]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f000 f9b7 	bl	8006c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	609a      	str	r2, [r3, #8]
      break;
 8006932:	e04f      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	6899      	ldr	r1, [r3, #8]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f000 f9a0 	bl	8006c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006956:	609a      	str	r2, [r3, #8]
      break;
 8006958:	e03c      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	6859      	ldr	r1, [r3, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	461a      	mov	r2, r3
 8006968:	f000 f914 	bl	8006b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2150      	movs	r1, #80	; 0x50
 8006972:	4618      	mov	r0, r3
 8006974:	f000 f96d 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 8006978:	e02c      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6859      	ldr	r1, [r3, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	461a      	mov	r2, r3
 8006988:	f000 f933 	bl	8006bf2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2160      	movs	r1, #96	; 0x60
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f95d 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 8006998:	e01c      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6859      	ldr	r1, [r3, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f000 f8f4 	bl	8006b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2140      	movs	r1, #64	; 0x40
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 f94d 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 80069b8:	e00c      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4619      	mov	r1, r3
 80069c4:	4610      	mov	r0, r2
 80069c6:	f000 f944 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 80069ca:	e003      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
      break;
 80069d0:	e000      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a40      	ldr	r2, [pc, #256]	; (8006b68 <TIM_Base_SetConfig+0x114>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d013      	beq.n	8006a94 <TIM_Base_SetConfig+0x40>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d00f      	beq.n	8006a94 <TIM_Base_SetConfig+0x40>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a3d      	ldr	r2, [pc, #244]	; (8006b6c <TIM_Base_SetConfig+0x118>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00b      	beq.n	8006a94 <TIM_Base_SetConfig+0x40>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a3c      	ldr	r2, [pc, #240]	; (8006b70 <TIM_Base_SetConfig+0x11c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d007      	beq.n	8006a94 <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a3b      	ldr	r2, [pc, #236]	; (8006b74 <TIM_Base_SetConfig+0x120>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a3a      	ldr	r2, [pc, #232]	; (8006b78 <TIM_Base_SetConfig+0x124>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d108      	bne.n	8006aa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a2f      	ldr	r2, [pc, #188]	; (8006b68 <TIM_Base_SetConfig+0x114>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d02b      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab4:	d027      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a2c      	ldr	r2, [pc, #176]	; (8006b6c <TIM_Base_SetConfig+0x118>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d023      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2b      	ldr	r2, [pc, #172]	; (8006b70 <TIM_Base_SetConfig+0x11c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01f      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2a      	ldr	r2, [pc, #168]	; (8006b74 <TIM_Base_SetConfig+0x120>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01b      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a29      	ldr	r2, [pc, #164]	; (8006b78 <TIM_Base_SetConfig+0x124>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d017      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a28      	ldr	r2, [pc, #160]	; (8006b7c <TIM_Base_SetConfig+0x128>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d013      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a27      	ldr	r2, [pc, #156]	; (8006b80 <TIM_Base_SetConfig+0x12c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00f      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a26      	ldr	r2, [pc, #152]	; (8006b84 <TIM_Base_SetConfig+0x130>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00b      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a25      	ldr	r2, [pc, #148]	; (8006b88 <TIM_Base_SetConfig+0x134>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a24      	ldr	r2, [pc, #144]	; (8006b8c <TIM_Base_SetConfig+0x138>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a23      	ldr	r2, [pc, #140]	; (8006b90 <TIM_Base_SetConfig+0x13c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d108      	bne.n	8006b18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a0a      	ldr	r2, [pc, #40]	; (8006b68 <TIM_Base_SetConfig+0x114>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_Base_SetConfig+0xf8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a0c      	ldr	r2, [pc, #48]	; (8006b78 <TIM_Base_SetConfig+0x124>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d103      	bne.n	8006b54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	691a      	ldr	r2, [r3, #16]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	615a      	str	r2, [r3, #20]
}
 8006b5a:	bf00      	nop
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40000400 	.word	0x40000400
 8006b70:	40000800 	.word	0x40000800
 8006b74:	40000c00 	.word	0x40000c00
 8006b78:	40010400 	.word	0x40010400
 8006b7c:	40014000 	.word	0x40014000
 8006b80:	40014400 	.word	0x40014400
 8006b84:	40014800 	.word	0x40014800
 8006b88:	40001800 	.word	0x40001800
 8006b8c:	40001c00 	.word	0x40001c00
 8006b90:	40002000 	.word	0x40002000

08006b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f023 0201 	bic.w	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f023 030a 	bic.w	r3, r3, #10
 8006bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	621a      	str	r2, [r3, #32]
}
 8006be6:	bf00      	nop
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b087      	sub	sp, #28
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0210 	bic.w	r2, r3, #16
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	031b      	lsls	r3, r3, #12
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f043 0307 	orr.w	r3, r3, #7
 8006c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	609a      	str	r2, [r3, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	021a      	lsls	r2, r3, #8
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	431a      	orrs	r2, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	609a      	str	r2, [r3, #8]
}
 8006cbc:	bf00      	nop
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e05a      	b.n	8006d96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a21      	ldr	r2, [pc, #132]	; (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d022      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2c:	d01d      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a1d      	ldr	r2, [pc, #116]	; (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d018      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1b      	ldr	r2, [pc, #108]	; (8006dac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1a      	ldr	r2, [pc, #104]	; (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00e      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d009      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d004      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a15      	ldr	r2, [pc, #84]	; (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d10c      	bne.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40010000 	.word	0x40010000
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800
 8006db0:	40000c00 	.word	0x40000c00
 8006db4:	40010400 	.word	0x40010400
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40001800 	.word	0x40001800

08006dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006de8:	b084      	sub	sp, #16
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	f107 001c 	add.w	r0, r7, #28
 8006df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d122      	bne.n	8006e46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d105      	bne.n	8006e3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f9c0 	bl	80071c0 <USB_CoreReset>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	e01a      	b.n	8006e7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f9b4 	bl	80071c0 <USB_CoreReset>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e6e:	e005      	b.n	8006e7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d10b      	bne.n	8006e9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f043 0206 	orr.w	r2, r3, #6
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f043 0220 	orr.w	r2, r3, #32
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ea6:	b004      	add	sp, #16
 8006ea8:	4770      	bx	lr

08006eaa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f043 0201 	orr.w	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f023 0201 	bic.w	r2, r3, #1
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d115      	bne.n	8006f3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	f7fa fbbd 	bl	800169c <HAL_Delay>
      ms++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3301      	adds	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f93a 	bl	80071a2 <USB_GetMode>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d01e      	beq.n	8006f72 <USB_SetCurrentMode+0x84>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b31      	cmp	r3, #49	; 0x31
 8006f38:	d9f0      	bls.n	8006f1c <USB_SetCurrentMode+0x2e>
 8006f3a:	e01a      	b.n	8006f72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d115      	bne.n	8006f6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f4e:	2001      	movs	r0, #1
 8006f50:	f7fa fba4 	bl	800169c <HAL_Delay>
      ms++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f921 	bl	80071a2 <USB_GetMode>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <USB_SetCurrentMode+0x84>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b31      	cmp	r3, #49	; 0x31
 8006f6a:	d9f0      	bls.n	8006f4e <USB_SetCurrentMode+0x60>
 8006f6c:	e001      	b.n	8006f72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e005      	b.n	8006f7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b32      	cmp	r3, #50	; 0x32
 8006f76:	d101      	bne.n	8006f7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4a13      	ldr	r2, [pc, #76]	; (8006fec <USB_FlushTxFifo+0x64>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d901      	bls.n	8006fa8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e01b      	b.n	8006fe0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	daf2      	bge.n	8006f96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	019b      	lsls	r3, r3, #6
 8006fb8:	f043 0220 	orr.w	r2, r3, #32
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a08      	ldr	r2, [pc, #32]	; (8006fec <USB_FlushTxFifo+0x64>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e006      	b.n	8006fe0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	d0f0      	beq.n	8006fc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	00030d40 	.word	0x00030d40

08006ff0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4a11      	ldr	r2, [pc, #68]	; (800704c <USB_FlushRxFifo+0x5c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d901      	bls.n	800700e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e018      	b.n	8007040 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	daf2      	bge.n	8006ffc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2210      	movs	r2, #16
 800701e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4a08      	ldr	r2, [pc, #32]	; (800704c <USB_FlushRxFifo+0x5c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e006      	b.n	8007040 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0310 	and.w	r3, r3, #16
 800703a:	2b10      	cmp	r3, #16
 800703c:	d0f0      	beq.n	8007020 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	00030d40 	.word	0x00030d40

08007050 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007050:	b480      	push	{r7}
 8007052:	b089      	sub	sp, #36	; 0x24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	4611      	mov	r1, r2
 800705c:	461a      	mov	r2, r3
 800705e:	460b      	mov	r3, r1
 8007060:	71fb      	strb	r3, [r7, #7]
 8007062:	4613      	mov	r3, r2
 8007064:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800706e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007072:	2b00      	cmp	r3, #0
 8007074:	d123      	bne.n	80070be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007076:	88bb      	ldrh	r3, [r7, #4]
 8007078:	3303      	adds	r3, #3
 800707a:	089b      	lsrs	r3, r3, #2
 800707c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800707e:	2300      	movs	r3, #0
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	e018      	b.n	80070b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	031a      	lsls	r2, r3, #12
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	4413      	add	r3, r2
 800708c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007090:	461a      	mov	r2, r3
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	3301      	adds	r3, #1
 800709c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3301      	adds	r3, #1
 80070a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	3301      	adds	r3, #1
 80070a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	3301      	adds	r3, #1
 80070ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	3301      	adds	r3, #1
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d3e2      	bcc.n	8007084 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3724      	adds	r7, #36	; 0x24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b08b      	sub	sp, #44	; 0x2c
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	089b      	lsrs	r3, r3, #2
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	623b      	str	r3, [r7, #32]
 80070f6:	e014      	b.n	8007122 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	601a      	str	r2, [r3, #0]
    pDest++;
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	3301      	adds	r3, #1
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	3301      	adds	r3, #1
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	3301      	adds	r3, #1
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	3301      	adds	r3, #1
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	3301      	adds	r3, #1
 8007120:	623b      	str	r3, [r7, #32]
 8007122:	6a3a      	ldr	r2, [r7, #32]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	429a      	cmp	r2, r3
 8007128:	d3e6      	bcc.n	80070f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800712a:	8bfb      	ldrh	r3, [r7, #30]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01e      	beq.n	800716e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800713a:	461a      	mov	r2, r3
 800713c:	f107 0310 	add.w	r3, r7, #16
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
 8007150:	b2da      	uxtb	r2, r3
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	701a      	strb	r2, [r3, #0]
      i++;
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	3301      	adds	r3, #1
 800715a:	623b      	str	r3, [r7, #32]
      pDest++;
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	3301      	adds	r3, #1
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007162:	8bfb      	ldrh	r3, [r7, #30]
 8007164:	3b01      	subs	r3, #1
 8007166:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007168:	8bfb      	ldrh	r3, [r7, #30]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1ea      	bne.n	8007144 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007170:	4618      	mov	r0, r3
 8007172:	372c      	adds	r7, #44	; 0x2c
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4013      	ands	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007194:	68fb      	ldr	r3, [r7, #12]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	f003 0301 	and.w	r3, r3, #1
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
	...

080071c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3301      	adds	r3, #1
 80071d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4a13      	ldr	r2, [pc, #76]	; (8007224 <USB_CoreReset+0x64>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d901      	bls.n	80071de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e01b      	b.n	8007216 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	daf2      	bge.n	80071cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f043 0201 	orr.w	r2, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4a09      	ldr	r2, [pc, #36]	; (8007224 <USB_CoreReset+0x64>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d901      	bls.n	8007208 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e006      	b.n	8007216 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b01      	cmp	r3, #1
 8007212:	d0f0      	beq.n	80071f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	00030d40 	.word	0x00030d40

08007228 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007228:	b084      	sub	sp, #16
 800722a:	b580      	push	{r7, lr}
 800722c:	b086      	sub	sp, #24
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007248:	461a      	mov	r2, r3
 800724a:	2300      	movs	r3, #0
 800724c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727a:	2b00      	cmp	r3, #0
 800727c:	d018      	beq.n	80072b0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10a      	bne.n	800729a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007292:	f043 0304 	orr.w	r3, r3, #4
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	e014      	b.n	80072c4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072a8:	f023 0304 	bic.w	r3, r3, #4
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	e009      	b.n	80072c4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072be:	f023 0304 	bic.w	r3, r3, #4
 80072c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072c4:	2110      	movs	r1, #16
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff fe5e 	bl	8006f88 <USB_FlushTxFifo>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fe8a 	bl	8006ff0 <USB_FlushRxFifo>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80072e6:	2300      	movs	r3, #0
 80072e8:	613b      	str	r3, [r7, #16]
 80072ea:	e015      	b.n	8007318 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f8:	461a      	mov	r2, r3
 80072fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730c:	461a      	mov	r2, r3
 800730e:	2300      	movs	r3, #0
 8007310:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3301      	adds	r3, #1
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	429a      	cmp	r2, r3
 800731e:	d3e5      	bcc.n	80072ec <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800732c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00b      	beq.n	8007352 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007340:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a13      	ldr	r2, [pc, #76]	; (8007394 <USB_HostInit+0x16c>)
 8007346:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a13      	ldr	r2, [pc, #76]	; (8007398 <USB_HostInit+0x170>)
 800734c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007350:	e009      	b.n	8007366 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2280      	movs	r2, #128	; 0x80
 8007356:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a10      	ldr	r2, [pc, #64]	; (800739c <USB_HostInit+0x174>)
 800735c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a0f      	ldr	r2, [pc, #60]	; (80073a0 <USB_HostInit+0x178>)
 8007362:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	2b00      	cmp	r3, #0
 800736a:	d105      	bne.n	8007378 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f043 0210 	orr.w	r2, r3, #16
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699a      	ldr	r2, [r3, #24]
 800737c:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <USB_HostInit+0x17c>)
 800737e:	4313      	orrs	r3, r2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007390:	b004      	add	sp, #16
 8007392:	4770      	bx	lr
 8007394:	01000200 	.word	0x01000200
 8007398:	00e00300 	.word	0x00e00300
 800739c:	00600080 	.word	0x00600080
 80073a0:	004000e0 	.word	0x004000e0
 80073a4:	a3200008 	.word	0xa3200008

080073a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073c6:	f023 0303 	bic.w	r3, r3, #3
 80073ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	68f9      	ldr	r1, [r7, #12]
 80073dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80073e0:	4313      	orrs	r3, r2
 80073e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d107      	bne.n	80073fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073f0:	461a      	mov	r2, r3
 80073f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80073f6:	6053      	str	r3, [r2, #4]
 80073f8:	e009      	b.n	800740e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d106      	bne.n	800740e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007406:	461a      	mov	r2, r3
 8007408:	f241 7370 	movw	r3, #6000	; 0x1770
 800740c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007440:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <USB_DriveVbus+0x44>
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d106      	bne.n	8007460 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800745a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800745e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746a:	d109      	bne.n	8007480 <USB_DriveVbus+0x64>
 800746c:	78fb      	ldrb	r3, [r7, #3]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800747a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800747e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800748e:	b480      	push	{r7}
 8007490:	b085      	sub	sp, #20
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	0c5b      	lsrs	r3, r3, #17
 80074ac:	f003 0303 	and.w	r3, r3, #3
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	b29b      	uxth	r3, r3
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	4608      	mov	r0, r1
 80074ea:	4611      	mov	r1, r2
 80074ec:	461a      	mov	r2, r3
 80074ee:	4603      	mov	r3, r0
 80074f0:	70fb      	strb	r3, [r7, #3]
 80074f2:	460b      	mov	r3, r1
 80074f4:	70bb      	strb	r3, [r7, #2]
 80074f6:	4613      	mov	r3, r2
 80074f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	4413      	add	r3, r2
 800750a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750e:	461a      	mov	r2, r3
 8007510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007514:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007516:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800751a:	2b03      	cmp	r3, #3
 800751c:	d87e      	bhi.n	800761c <USB_HC_Init+0x13c>
 800751e:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <USB_HC_Init+0x44>)
 8007520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007524:	08007535 	.word	0x08007535
 8007528:	080075df 	.word	0x080075df
 800752c:	08007535 	.word	0x08007535
 8007530:	080075a1 	.word	0x080075a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	4413      	add	r3, r2
 800753c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007540:	461a      	mov	r2, r3
 8007542:	f240 439d 	movw	r3, #1181	; 0x49d
 8007546:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007548:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800754c:	2b00      	cmp	r3, #0
 800754e:	da10      	bge.n	8007572 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	4413      	add	r3, r2
 8007558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	78fa      	ldrb	r2, [r7, #3]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	440a      	add	r2, r1
 8007566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800756a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800756e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007570:	e057      	b.n	8007622 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757a:	2b00      	cmp	r3, #0
 800757c:	d051      	beq.n	8007622 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800757e:	78fb      	ldrb	r3, [r7, #3]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	4413      	add	r3, r2
 8007586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	78fa      	ldrb	r2, [r7, #3]
 800758e:	0151      	lsls	r1, r2, #5
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	440a      	add	r2, r1
 8007594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007598:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800759c:	60d3      	str	r3, [r2, #12]
      break;
 800759e:	e040      	b.n	8007622 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ac:	461a      	mov	r2, r3
 80075ae:	f240 639d 	movw	r3, #1693	; 0x69d
 80075b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da34      	bge.n	8007626 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	78fa      	ldrb	r2, [r7, #3]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80075dc:	e023      	b.n	8007626 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ea:	461a      	mov	r2, r3
 80075ec:	f240 2325 	movw	r3, #549	; 0x225
 80075f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da17      	bge.n	800762a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80075fa:	78fb      	ldrb	r3, [r7, #3]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	4413      	add	r3, r2
 8007602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	440a      	add	r2, r1
 8007610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007614:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007618:	60d3      	str	r3, [r2, #12]
      }
      break;
 800761a:	e006      	b.n	800762a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	77fb      	strb	r3, [r7, #31]
      break;
 8007620:	e004      	b.n	800762c <USB_HC_Init+0x14c>
      break;
 8007622:	bf00      	nop
 8007624:	e002      	b.n	800762c <USB_HC_Init+0x14c>
      break;
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <USB_HC_Init+0x14c>
      break;
 800762a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	4413      	add	r3, r2
 8007634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	78fa      	ldrb	r2, [r7, #3]
 800763c:	0151      	lsls	r1, r2, #5
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	440a      	add	r2, r1
 8007642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007646:	f043 0302 	orr.w	r3, r3, #2
 800764a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	2101      	movs	r1, #1
 800765c:	fa01 f303 	lsl.w	r3, r1, r3
 8007660:	6939      	ldr	r1, [r7, #16]
 8007662:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007666:	4313      	orrs	r3, r2
 8007668:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007676:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800767a:	2b00      	cmp	r3, #0
 800767c:	da03      	bge.n	8007686 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800767e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007682:	61bb      	str	r3, [r7, #24]
 8007684:	e001      	b.n	800768a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff feff 	bl	800748e <USB_GetHostSpeed>
 8007690:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007692:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007696:	2b02      	cmp	r3, #2
 8007698:	d106      	bne.n	80076a8 <USB_HC_Init+0x1c8>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b02      	cmp	r3, #2
 800769e:	d003      	beq.n	80076a8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80076a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076a4:	617b      	str	r3, [r7, #20]
 80076a6:	e001      	b.n	80076ac <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076ac:	787b      	ldrb	r3, [r7, #1]
 80076ae:	059b      	lsls	r3, r3, #22
 80076b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076b4:	78bb      	ldrb	r3, [r7, #2]
 80076b6:	02db      	lsls	r3, r3, #11
 80076b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076c2:	049b      	lsls	r3, r3, #18
 80076c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80076ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	0159      	lsls	r1, r3, #5
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	440b      	add	r3, r1
 80076de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076e8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80076ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d003      	beq.n	80076fa <USB_HC_Init+0x21a>
 80076f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d10f      	bne.n	800771a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4413      	add	r3, r2
 8007702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	78fa      	ldrb	r2, [r7, #3]
 800770a:	0151      	lsls	r1, r2, #5
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	440a      	add	r2, r1
 8007710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007714:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007718:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800771a:	7ffb      	ldrb	r3, [r7, #31]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08c      	sub	sp, #48	; 0x30
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800773c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007740:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d02d      	beq.n	80077aa <USB_HC_StartXfer+0x86>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	791b      	ldrb	r3, [r3, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d129      	bne.n	80077aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d117      	bne.n	800778c <USB_HC_StartXfer+0x68>
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	79db      	ldrb	r3, [r3, #7]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <USB_HC_StartXfer+0x48>
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	79db      	ldrb	r3, [r3, #7]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d10f      	bne.n	800778c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	4413      	add	r3, r2
 8007774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	6a3a      	ldr	r2, [r7, #32]
 8007780:	440a      	add	r2, r1
 8007782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10b      	bne.n	80077aa <USB_HC_StartXfer+0x86>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	795b      	ldrb	r3, [r3, #5]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d107      	bne.n	80077aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	785b      	ldrb	r3, [r3, #1]
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fa0f 	bl	8007bc4 <USB_DoPing>
      return HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e0f8      	b.n	800799c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d018      	beq.n	80077e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	8912      	ldrh	r2, [r2, #8]
 80077ba:	4413      	add	r3, r2
 80077bc:	3b01      	subs	r3, #1
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	8912      	ldrh	r2, [r2, #8]
 80077c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80077c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80077c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80077ca:	8b7b      	ldrh	r3, [r7, #26]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d90b      	bls.n	80077e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80077d0:	8b7b      	ldrh	r3, [r7, #26]
 80077d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	8912      	ldrh	r2, [r2, #8]
 80077da:	fb03 f202 	mul.w	r2, r3, r2
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	611a      	str	r2, [r3, #16]
 80077e2:	e001      	b.n	80077e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80077e4:	2301      	movs	r3, #1
 80077e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	78db      	ldrb	r3, [r3, #3]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	8912      	ldrh	r2, [r2, #8]
 80077f6:	fb03 f202 	mul.w	r2, r3, r2
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	611a      	str	r2, [r3, #16]
 80077fe:	e003      	b.n	8007808 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	695a      	ldr	r2, [r3, #20]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007812:	04d9      	lsls	r1, r3, #19
 8007814:	4b63      	ldr	r3, [pc, #396]	; (80079a4 <USB_HC_StartXfer+0x280>)
 8007816:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007818:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	7a9b      	ldrb	r3, [r3, #10]
 800781e:	075b      	lsls	r3, r3, #29
 8007820:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007824:	69f9      	ldr	r1, [r7, #28]
 8007826:	0148      	lsls	r0, r1, #5
 8007828:	6a39      	ldr	r1, [r7, #32]
 800782a:	4401      	add	r1, r0
 800782c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007830:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007832:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d009      	beq.n	800784e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	68d9      	ldr	r1, [r3, #12]
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	4413      	add	r3, r2
 8007846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800784a:	460a      	mov	r2, r1
 800784c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	bf0c      	ite	eq
 800785e:	2301      	moveq	r3, #1
 8007860:	2300      	movne	r3, #0
 8007862:	b2db      	uxtb	r3, r3
 8007864:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	4413      	add	r3, r2
 800786e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69fa      	ldr	r2, [r7, #28]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	6a3a      	ldr	r2, [r7, #32]
 800787a:	440a      	add	r2, r1
 800787c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007880:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007884:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	4413      	add	r3, r2
 800788e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	7e7b      	ldrb	r3, [r7, #25]
 8007896:	075b      	lsls	r3, r3, #29
 8007898:	69f9      	ldr	r1, [r7, #28]
 800789a:	0148      	lsls	r0, r1, #5
 800789c:	6a39      	ldr	r1, [r7, #32]
 800789e:	4401      	add	r1, r0
 80078a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80078a4:	4313      	orrs	r3, r2
 80078a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	78db      	ldrb	r3, [r3, #3]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d004      	beq.n	80078d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ce:	613b      	str	r3, [r7, #16]
 80078d0:	e003      	b.n	80078da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ee:	461a      	mov	r2, r3
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	e04e      	b.n	800799c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	78db      	ldrb	r3, [r3, #3]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d149      	bne.n	800799a <USB_HC_StartXfer+0x276>
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d045      	beq.n	800799a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	79db      	ldrb	r3, [r3, #7]
 8007912:	2b03      	cmp	r3, #3
 8007914:	d830      	bhi.n	8007978 <USB_HC_StartXfer+0x254>
 8007916:	a201      	add	r2, pc, #4	; (adr r2, 800791c <USB_HC_StartXfer+0x1f8>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	0800792d 	.word	0x0800792d
 8007920:	08007951 	.word	0x08007951
 8007924:	0800792d 	.word	0x0800792d
 8007928:	08007951 	.word	0x08007951
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	3303      	adds	r3, #3
 8007932:	089b      	lsrs	r3, r3, #2
 8007934:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007936:	8afa      	ldrh	r2, [r7, #22]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	b29b      	uxth	r3, r3
 800793e:	429a      	cmp	r2, r3
 8007940:	d91c      	bls.n	800797c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	f043 0220 	orr.w	r2, r3, #32
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	619a      	str	r2, [r3, #24]
        }
        break;
 800794e:	e015      	b.n	800797c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	3303      	adds	r3, #3
 8007956:	089b      	lsrs	r3, r3, #2
 8007958:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800795a:	8afa      	ldrh	r2, [r7, #22]
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	b29b      	uxth	r3, r3
 8007966:	429a      	cmp	r2, r3
 8007968:	d90a      	bls.n	8007980 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	619a      	str	r2, [r3, #24]
        }
        break;
 8007976:	e003      	b.n	8007980 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007978:	bf00      	nop
 800797a:	e002      	b.n	8007982 <USB_HC_StartXfer+0x25e>
        break;
 800797c:	bf00      	nop
 800797e:	e000      	b.n	8007982 <USB_HC_StartXfer+0x25e>
        break;
 8007980:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	68d9      	ldr	r1, [r3, #12]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	785a      	ldrb	r2, [r3, #1]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	b29b      	uxth	r3, r3
 8007990:	2000      	movs	r0, #0
 8007992:	9000      	str	r0, [sp, #0]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff fb5b 	bl	8007050 <USB_WritePacket>
  }

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3728      	adds	r7, #40	; 0x28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	1ff80000 	.word	0x1ff80000

080079a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	b29b      	uxth	r3, r3
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b089      	sub	sp, #36	; 0x24
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	0c9b      	lsrs	r3, r3, #18
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	0fdb      	lsrs	r3, r3, #31
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d104      	bne.n	8007a24 <USB_HC_Halt+0x5a>
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	e0c8      	b.n	8007bb6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <USB_HC_Halt+0x66>
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d163      	bne.n	8007af8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a4e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f040 80ab 	bne.w	8007bb4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d133      	bne.n	8007ad2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	0151      	lsls	r1, r2, #5
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	440a      	add	r2, r1
 8007a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a88:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	0151      	lsls	r1, r2, #5
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	440a      	add	r2, r1
 8007aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007aa8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ab6:	d81d      	bhi.n	8007af4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ace:	d0ec      	beq.n	8007aaa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ad0:	e070      	b.n	8007bb4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	0151      	lsls	r1, r2, #5
 8007ae4:	69fa      	ldr	r2, [r7, #28]
 8007ae6:	440a      	add	r2, r1
 8007ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007af0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007af2:	e05f      	b.n	8007bb4 <USB_HC_Halt+0x1ea>
            break;
 8007af4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007af6:	e05d      	b.n	8007bb4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	0151      	lsls	r1, r2, #5
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	440a      	add	r2, r1
 8007b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b16:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d133      	bne.n	8007b90 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	0151      	lsls	r1, r2, #5
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	440a      	add	r2, r1
 8007b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	0151      	lsls	r1, r2, #5
 8007b5a:	69fa      	ldr	r2, [r7, #28]
 8007b5c:	440a      	add	r2, r1
 8007b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b66:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b74:	d81d      	bhi.n	8007bb2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b8c:	d0ec      	beq.n	8007b68 <USB_HC_Halt+0x19e>
 8007b8e:	e011      	b.n	8007bb4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	0151      	lsls	r1, r2, #5
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	440a      	add	r2, r1
 8007ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	e000      	b.n	8007bb4 <USB_HC_Halt+0x1ea>
          break;
 8007bb2:	bf00      	nop
    }
  }

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3724      	adds	r7, #36	; 0x24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
	...

08007bc4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	04da      	lsls	r2, r3, #19
 8007be0:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <USB_DoPing+0x74>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bf4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c0c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c14:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c22:	461a      	mov	r2, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	1ff80000 	.word	0x1ff80000

08007c3c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff f93b 	bl	8006ecc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c56:	2110      	movs	r1, #16
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff f995 	bl	8006f88 <USB_FlushTxFifo>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff f9c1 	bl	8006ff0 <USB_FlushRxFifo>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61bb      	str	r3, [r7, #24]
 8007c7c:	e01f      	b.n	8007cbe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ca4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	61bb      	str	r3, [r7, #24]
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2b0f      	cmp	r3, #15
 8007cc2:	d9dc      	bls.n	8007c7e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	e034      	b.n	8007d34 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ce0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ce8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cf0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cfe:	461a      	mov	r2, r3
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d10:	d80c      	bhi.n	8007d2c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d28:	d0ec      	beq.n	8007d04 <USB_StopHost+0xc8>
 8007d2a:	e000      	b.n	8007d2e <USB_StopHost+0xf2>
        break;
 8007d2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	3301      	adds	r3, #1
 8007d32:	61bb      	str	r3, [r7, #24]
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2b0f      	cmp	r3, #15
 8007d38:	d9c7      	bls.n	8007cca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d40:	461a      	mov	r2, r3
 8007d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff f8aa 	bl	8006eaa <USB_EnableGlobalInt>

  return ret;
 8007d56:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3720      	adds	r7, #32
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b089      	sub	sp, #36	; 0x24
 8007d64:	af04      	add	r7, sp, #16
 8007d66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007d68:	2301      	movs	r3, #1
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	2102      	movs	r1, #2
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fc66 	bl	8008640 <USBH_FindInterface>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	2bff      	cmp	r3, #255	; 0xff
 8007d7c:	d002      	beq.n	8007d84 <USBH_CDC_InterfaceInit+0x24>
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d901      	bls.n	8007d88 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d84:	2302      	movs	r3, #2
 8007d86:	e13d      	b.n	8008004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fc3b 	bl	8008608 <USBH_SelectInterface>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e131      	b.n	8008004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007da6:	2050      	movs	r0, #80	; 0x50
 8007da8:	f001 fb16 	bl	80093d8 <malloc>
 8007dac:	4603      	mov	r3, r0
 8007dae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e11f      	b.n	8008004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007dc4:	2250      	movs	r2, #80	; 0x50
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	68b8      	ldr	r0, [r7, #8]
 8007dca:	f001 fb23 	bl	8009414 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	211a      	movs	r1, #26
 8007dd4:	fb01 f303 	mul.w	r3, r1, r3
 8007dd8:	4413      	add	r3, r2
 8007dda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	b25b      	sxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	da15      	bge.n	8007e12 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	211a      	movs	r1, #26
 8007dec:	fb01 f303 	mul.w	r3, r1, r3
 8007df0:	4413      	add	r3, r2
 8007df2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	211a      	movs	r1, #26
 8007e02:	fb01 f303 	mul.w	r3, r1, r3
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e0c:	881a      	ldrh	r2, [r3, #0]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 ff9c 	bl	8008d56 <USBH_AllocPipe>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	461a      	mov	r2, r3
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	7819      	ldrb	r1, [r3, #0]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	7858      	ldrb	r0, [r3, #1]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	8952      	ldrh	r2, [r2, #10]
 8007e3e:	9202      	str	r2, [sp, #8]
 8007e40:	2203      	movs	r2, #3
 8007e42:	9201      	str	r2, [sp, #4]
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	4623      	mov	r3, r4
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 ff54 	bl	8008cf8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2200      	movs	r2, #0
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 fa17 	bl	800928c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007e5e:	2300      	movs	r3, #0
 8007e60:	2200      	movs	r2, #0
 8007e62:	210a      	movs	r1, #10
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fbeb 	bl	8008640 <USBH_FindInterface>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	2bff      	cmp	r3, #255	; 0xff
 8007e72:	d002      	beq.n	8007e7a <USBH_CDC_InterfaceInit+0x11a>
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d901      	bls.n	8007e7e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e0c2      	b.n	8008004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	211a      	movs	r1, #26
 8007e84:	fb01 f303 	mul.w	r3, r1, r3
 8007e88:	4413      	add	r3, r2
 8007e8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	b25b      	sxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	da16      	bge.n	8007ec4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	211a      	movs	r1, #26
 8007e9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ea6:	781a      	ldrb	r2, [r3, #0]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	211a      	movs	r1, #26
 8007eb2:	fb01 f303 	mul.w	r3, r1, r3
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ebc:	881a      	ldrh	r2, [r3, #0]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	835a      	strh	r2, [r3, #26]
 8007ec2:	e015      	b.n	8007ef0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	211a      	movs	r1, #26
 8007eca:	fb01 f303 	mul.w	r3, r1, r3
 8007ece:	4413      	add	r3, r2
 8007ed0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ed4:	781a      	ldrb	r2, [r3, #0]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	211a      	movs	r1, #26
 8007ee0:	fb01 f303 	mul.w	r3, r1, r3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007eea:	881a      	ldrh	r2, [r3, #0]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	211a      	movs	r1, #26
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b25b      	sxtb	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	da16      	bge.n	8007f36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	211a      	movs	r1, #26
 8007f0e:	fb01 f303 	mul.w	r3, r1, r3
 8007f12:	4413      	add	r3, r2
 8007f14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	211a      	movs	r1, #26
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007f2e:	881a      	ldrh	r2, [r3, #0]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	835a      	strh	r2, [r3, #26]
 8007f34:	e015      	b.n	8007f62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	211a      	movs	r1, #26
 8007f3c:	fb01 f303 	mul.w	r3, r1, r3
 8007f40:	4413      	add	r3, r2
 8007f42:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007f46:	781a      	ldrb	r2, [r3, #0]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	211a      	movs	r1, #26
 8007f52:	fb01 f303 	mul.w	r3, r1, r3
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007f5c:	881a      	ldrh	r2, [r3, #0]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	7b9b      	ldrb	r3, [r3, #14]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fef4 	bl	8008d56 <USBH_AllocPipe>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	461a      	mov	r2, r3
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	7bdb      	ldrb	r3, [r3, #15]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 feea 	bl	8008d56 <USBH_AllocPipe>
 8007f82:	4603      	mov	r3, r0
 8007f84:	461a      	mov	r2, r3
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	7b59      	ldrb	r1, [r3, #13]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	7b98      	ldrb	r0, [r3, #14]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	8b12      	ldrh	r2, [r2, #24]
 8007fa2:	9202      	str	r2, [sp, #8]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	9201      	str	r2, [sp, #4]
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	4623      	mov	r3, r4
 8007fac:	4602      	mov	r2, r0
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fea2 	bl	8008cf8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	7b19      	ldrb	r1, [r3, #12]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	7bd8      	ldrb	r0, [r3, #15]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	8b52      	ldrh	r2, [r2, #26]
 8007fcc:	9202      	str	r2, [sp, #8]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	9201      	str	r2, [sp, #4]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	4623      	mov	r3, r4
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fe8d 	bl	8008cf8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	7b5b      	ldrb	r3, [r3, #13]
 8007fea:	2200      	movs	r2, #0
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 f94c 	bl	800928c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	7b1b      	ldrb	r3, [r3, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 f945 	bl	800928c <USBH_LL_SetToggle>

  return USBH_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	bd90      	pop	{r4, r7, pc}

0800800c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800801a:	69db      	ldr	r3, [r3, #28]
 800801c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00e      	beq.n	8008044 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fe82 	bl	8008d36 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fead 	bl	8008d98 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	7b1b      	ldrb	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00e      	beq.n	800806a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	7b1b      	ldrb	r3, [r3, #12]
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fe6f 	bl	8008d36 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	7b1b      	ldrb	r3, [r3, #12]
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fe9a 	bl	8008d98 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	7b5b      	ldrb	r3, [r3, #13]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00e      	beq.n	8008090 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	7b5b      	ldrb	r3, [r3, #13]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fe5c 	bl	8008d36 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	7b5b      	ldrb	r3, [r3, #13]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fe87 	bl	8008d98 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00b      	beq.n	80080b4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 f99f 	bl	80093e8 <free>
    phost->pActiveClass->pData = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080b0:	2200      	movs	r2, #0
 80080b2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3340      	adds	r3, #64	; 0x40
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f8b1 	bl	800823e <GetLineCoding>
 80080dc:	4603      	mov	r3, r0
 80080de:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80080e0:	7afb      	ldrb	r3, [r7, #11]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d105      	bne.n	80080f2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080ec:	2102      	movs	r1, #2
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80080f2:	7afb      	ldrb	r3, [r7, #11]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008104:	2301      	movs	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800811c:	2b04      	cmp	r3, #4
 800811e:	d877      	bhi.n	8008210 <USBH_CDC_Process+0x114>
 8008120:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <USBH_CDC_Process+0x2c>)
 8008122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008126:	bf00      	nop
 8008128:	0800813d 	.word	0x0800813d
 800812c:	08008143 	.word	0x08008143
 8008130:	08008173 	.word	0x08008173
 8008134:	080081e7 	.word	0x080081e7
 8008138:	080081f5 	.word	0x080081f5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]
      break;
 8008140:	e06d      	b.n	800821e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f897 	bl	800827c <SetLineCoding>
 800814e:	4603      	mov	r3, r0
 8008150:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008160:	e058      	b.n	8008214 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d055      	beq.n	8008214 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2204      	movs	r2, #4
 800816c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008170:	e050      	b.n	8008214 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	3340      	adds	r3, #64	; 0x40
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f860 	bl	800823e <GetLineCoding>
 800817e:	4603      	mov	r3, r0
 8008180:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d126      	bne.n	80081d6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800819a:	791b      	ldrb	r3, [r3, #4]
 800819c:	429a      	cmp	r2, r3
 800819e:	d13b      	bne.n	8008218 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081aa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d133      	bne.n	8008218 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80081bc:	429a      	cmp	r2, r3
 80081be:	d12b      	bne.n	8008218 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d124      	bne.n	8008218 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f958 	bl	8008484 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80081d4:	e020      	b.n	8008218 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d01d      	beq.n	8008218 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2204      	movs	r2, #4
 80081e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80081e4:	e018      	b.n	8008218 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f867 	bl	80082ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f8da 	bl	80083a6 <CDC_ProcessReception>
      break;
 80081f2:	e014      	b.n	800821e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80081f4:	2100      	movs	r1, #0
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fb08 	bl	800880c <USBH_ClrFeature>
 80081fc:	4603      	mov	r3, r0
 80081fe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10a      	bne.n	800821c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800820e:	e005      	b.n	800821c <USBH_CDC_Process+0x120>

    default:
      break;
 8008210:	bf00      	nop
 8008212:	e004      	b.n	800821e <USBH_CDC_Process+0x122>
      break;
 8008214:	bf00      	nop
 8008216:	e002      	b.n	800821e <USBH_CDC_Process+0x122>
      break;
 8008218:	bf00      	nop
 800821a:	e000      	b.n	800821e <USBH_CDC_Process+0x122>
      break;
 800821c:	bf00      	nop

  }

  return status;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	22a1      	movs	r2, #161	; 0xa1
 800824c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2221      	movs	r2, #33	; 0x21
 8008252:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2207      	movs	r2, #7
 8008264:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2207      	movs	r2, #7
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 faf1 	bl	8008854 <USBH_CtlReq>
 8008272:	4603      	mov	r3, r0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2221      	movs	r2, #33	; 0x21
 800828a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2220      	movs	r2, #32
 8008290:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2207      	movs	r2, #7
 80082a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2207      	movs	r2, #7
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fad2 	bl	8008854 <USBH_CtlReq>
 80082b0:	4603      	mov	r3, r0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b086      	sub	sp, #24
 80082be:	af02      	add	r7, sp, #8
 80082c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d002      	beq.n	80082e0 <CDC_ProcessTransmission+0x26>
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d023      	beq.n	8008326 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80082de:	e05e      	b.n	800839e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	8b12      	ldrh	r2, [r2, #24]
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d90b      	bls.n	8008304 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	69d9      	ldr	r1, [r3, #28]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	8b1a      	ldrh	r2, [r3, #24]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	7b5b      	ldrb	r3, [r3, #13]
 80082f8:	2001      	movs	r0, #1
 80082fa:	9000      	str	r0, [sp, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fcb8 	bl	8008c72 <USBH_BulkSendData>
 8008302:	e00b      	b.n	800831c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800830c:	b29a      	uxth	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	7b5b      	ldrb	r3, [r3, #13]
 8008312:	2001      	movs	r0, #1
 8008314:	9000      	str	r0, [sp, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fcab 	bl	8008c72 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008324:	e03b      	b.n	800839e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	7b5b      	ldrb	r3, [r3, #13]
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 ff83 	bl	8009238 <USBH_LL_GetURBState>
 8008332:	4603      	mov	r3, r0
 8008334:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008336:	7afb      	ldrb	r3, [r7, #11]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d128      	bne.n	800838e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	8b12      	ldrh	r2, [r2, #24]
 8008344:	4293      	cmp	r3, r2
 8008346:	d90e      	bls.n	8008366 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	8b12      	ldrh	r2, [r2, #24]
 8008350:	1a9a      	subs	r2, r3, r2
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	8b12      	ldrh	r2, [r2, #24]
 800835e:	441a      	add	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	61da      	str	r2, [r3, #28]
 8008364:	e002      	b.n	800836c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	d004      	beq.n	800837e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800837c:	e00e      	b.n	800839c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f868 	bl	800845c <USBH_CDC_TransmitCallback>
      break;
 800838c:	e006      	b.n	800839c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800838e:	7afb      	ldrb	r3, [r7, #11]
 8008390:	2b02      	cmp	r3, #2
 8008392:	d103      	bne.n	800839c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800839c:	bf00      	nop
  }
}
 800839e:	bf00      	nop
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b086      	sub	sp, #24
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d002      	beq.n	80083cc <CDC_ProcessReception+0x26>
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d00e      	beq.n	80083e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80083ca:	e043      	b.n	8008454 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	6a19      	ldr	r1, [r3, #32]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	8b5a      	ldrh	r2, [r3, #26]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	7b1b      	ldrb	r3, [r3, #12]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fc6f 	bl	8008cbc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2204      	movs	r2, #4
 80083e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80083e6:	e035      	b.n	8008454 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	7b1b      	ldrb	r3, [r3, #12]
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 ff22 	bl	8009238 <USBH_LL_GetURBState>
 80083f4:	4603      	mov	r3, r0
 80083f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80083f8:	7cfb      	ldrb	r3, [r7, #19]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d129      	bne.n	8008452 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	7b1b      	ldrb	r3, [r3, #12]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fe85 	bl	8009114 <USBH_LL_GetLastXferSize>
 800840a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	429a      	cmp	r2, r3
 8008414:	d016      	beq.n	8008444 <CDC_ProcessReception+0x9e>
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	8b5b      	ldrh	r3, [r3, #26]
 800841a:	461a      	mov	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4293      	cmp	r3, r2
 8008420:	d910      	bls.n	8008444 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	6a1a      	ldr	r2, [r3, #32]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	441a      	add	r2, r3
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2203      	movs	r2, #3
 800843e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008442:	e006      	b.n	8008452 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f80f 	bl	8008470 <USBH_CDC_ReceiveCallback>
      break;
 8008452:	bf00      	nop
  }
}
 8008454:	bf00      	nop
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80084ac:	2302      	movs	r3, #2
 80084ae:	e029      	b.n	8008504 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	79fa      	ldrb	r2, [r7, #7]
 80084b4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f81f 	bl	800850c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d003      	beq.n	80084fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fd97 	bl	8009030 <USBH_LL_Init>

  return USBH_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e009      	b.n	8008532 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	33e0      	adds	r3, #224	; 0xe0
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	2200      	movs	r2, #0
 800852a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b0f      	cmp	r3, #15
 8008536:	d9f2      	bls.n	800851e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	e009      	b.n	8008552 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008548:	2200      	movs	r2, #0
 800854a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3301      	adds	r3, #1
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008558:	d3f1      	bcc.n	800853e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2240      	movs	r2, #64	; 0x40
 800857e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d016      	beq.n	80085f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10e      	bne.n	80085f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80085d8:	1c59      	adds	r1, r3, #1
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	33de      	adds	r3, #222	; 0xde
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
 80085ee:	e004      	b.n	80085fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80085f0:	2302      	movs	r3, #2
 80085f2:	73fb      	strb	r3, [r7, #15]
 80085f4:	e001      	b.n	80085fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80085f6:	2302      	movs	r3, #2
 80085f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800861e:	78fa      	ldrb	r2, [r7, #3]
 8008620:	429a      	cmp	r2, r3
 8008622:	d204      	bcs.n	800862e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	78fa      	ldrb	r2, [r7, #3]
 8008628:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800862c:	e001      	b.n	8008632 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800862e:	2302      	movs	r3, #2
 8008630:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	4608      	mov	r0, r1
 800864a:	4611      	mov	r1, r2
 800864c:	461a      	mov	r2, r3
 800864e:	4603      	mov	r3, r0
 8008650:	70fb      	strb	r3, [r7, #3]
 8008652:	460b      	mov	r3, r1
 8008654:	70bb      	strb	r3, [r7, #2]
 8008656:	4613      	mov	r3, r2
 8008658:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008668:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800866a:	e025      	b.n	80086b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	221a      	movs	r2, #26
 8008670:	fb02 f303 	mul.w	r3, r2, r3
 8008674:	3308      	adds	r3, #8
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	4413      	add	r3, r2
 800867a:	3302      	adds	r3, #2
 800867c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	795b      	ldrb	r3, [r3, #5]
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	429a      	cmp	r2, r3
 8008686:	d002      	beq.n	800868e <USBH_FindInterface+0x4e>
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	2bff      	cmp	r3, #255	; 0xff
 800868c:	d111      	bne.n	80086b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008692:	78ba      	ldrb	r2, [r7, #2]
 8008694:	429a      	cmp	r2, r3
 8008696:	d002      	beq.n	800869e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008698:	78bb      	ldrb	r3, [r7, #2]
 800869a:	2bff      	cmp	r3, #255	; 0xff
 800869c:	d109      	bne.n	80086b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80086a2:	787a      	ldrb	r2, [r7, #1]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d002      	beq.n	80086ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80086a8:	787b      	ldrb	r3, [r7, #1]
 80086aa:	2bff      	cmp	r3, #255	; 0xff
 80086ac:	d101      	bne.n	80086b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	e006      	b.n	80086c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	3301      	adds	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d9d6      	bls.n	800866c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80086be:	23ff      	movs	r3, #255	; 0xff
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	371c      	adds	r7, #28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fce7 	bl	80090a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80086da:	2101      	movs	r1, #1
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fdbe 	bl	800925e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f804 	bl	800872e <USBH_HandleSof>
}
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b0b      	cmp	r3, #11
 800873e:	d10a      	bne.n	8008756 <USBH_HandleSof+0x28>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d005      	beq.n	8008756 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	4798      	blx	r3
  }
}
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800876e:	bf00      	nop
}
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800878a:	bf00      	nop
}
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fc7a 	bl	80090de <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	791b      	ldrb	r3, [r3, #4]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fad1 	bl	8008d98 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	795b      	ldrb	r3, [r3, #5]
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 facb 	bl	8008d98 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	789b      	ldrb	r3, [r3, #2]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d10f      	bne.n	8008840 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008832:	78fb      	ldrb	r3, [r7, #3]
 8008834:	b29a      	uxth	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008840:	2200      	movs	r2, #0
 8008842:	2100      	movs	r1, #0
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f805 	bl	8008854 <USBH_CtlReq>
 800884a:	4603      	mov	r3, r0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	4613      	mov	r3, r2
 8008860:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008862:	2301      	movs	r3, #1
 8008864:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	789b      	ldrb	r3, [r3, #2]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d002      	beq.n	8008874 <USBH_CtlReq+0x20>
 800886e:	2b02      	cmp	r3, #2
 8008870:	d00f      	beq.n	8008892 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008872:	e027      	b.n	80088c4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	88fa      	ldrh	r2, [r7, #6]
 800887e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2201      	movs	r2, #1
 8008884:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2202      	movs	r2, #2
 800888a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800888c:	2301      	movs	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]
      break;
 8008890:	e018      	b.n	80088c4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 f81c 	bl	80088d0 <USBH_HandleControl>
 8008898:	4603      	mov	r3, r0
 800889a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <USBH_CtlReq+0x54>
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d106      	bne.n	80088b6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	761a      	strb	r2, [r3, #24]
      break;
 80088b4:	e005      	b.n	80088c2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d102      	bne.n	80088c2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2201      	movs	r2, #1
 80088c0:	709a      	strb	r2, [r3, #2]
      break;
 80088c2:	bf00      	nop
  }
  return status;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80088d8:	2301      	movs	r3, #1
 80088da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088dc:	2300      	movs	r3, #0
 80088de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7e1b      	ldrb	r3, [r3, #24]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	2b0a      	cmp	r3, #10
 80088e8:	f200 8156 	bhi.w	8008b98 <USBH_HandleControl+0x2c8>
 80088ec:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <USBH_HandleControl+0x24>)
 80088ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f2:	bf00      	nop
 80088f4:	08008921 	.word	0x08008921
 80088f8:	0800893b 	.word	0x0800893b
 80088fc:	080089a5 	.word	0x080089a5
 8008900:	080089cb 	.word	0x080089cb
 8008904:	08008a03 	.word	0x08008a03
 8008908:	08008a2d 	.word	0x08008a2d
 800890c:	08008a7f 	.word	0x08008a7f
 8008910:	08008aa1 	.word	0x08008aa1
 8008914:	08008add 	.word	0x08008add
 8008918:	08008b03 	.word	0x08008b03
 800891c:	08008b41 	.word	0x08008b41
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f103 0110 	add.w	r1, r3, #16
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	795b      	ldrb	r3, [r3, #5]
 800892a:	461a      	mov	r2, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f943 	bl	8008bb8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2202      	movs	r2, #2
 8008936:	761a      	strb	r2, [r3, #24]
      break;
 8008938:	e139      	b.n	8008bae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	795b      	ldrb	r3, [r3, #5]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fc79 	bl	8009238 <USBH_LL_GetURBState>
 8008946:	4603      	mov	r3, r0
 8008948:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d11e      	bne.n	800898e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	7c1b      	ldrb	r3, [r3, #16]
 8008954:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008958:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	8adb      	ldrh	r3, [r3, #22]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008962:	7b7b      	ldrb	r3, [r7, #13]
 8008964:	2b80      	cmp	r3, #128	; 0x80
 8008966:	d103      	bne.n	8008970 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2203      	movs	r2, #3
 800896c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800896e:	e115      	b.n	8008b9c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2205      	movs	r2, #5
 8008974:	761a      	strb	r2, [r3, #24]
      break;
 8008976:	e111      	b.n	8008b9c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008978:	7b7b      	ldrb	r3, [r7, #13]
 800897a:	2b80      	cmp	r3, #128	; 0x80
 800897c:	d103      	bne.n	8008986 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2209      	movs	r2, #9
 8008982:	761a      	strb	r2, [r3, #24]
      break;
 8008984:	e10a      	b.n	8008b9c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2207      	movs	r2, #7
 800898a:	761a      	strb	r2, [r3, #24]
      break;
 800898c:	e106      	b.n	8008b9c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	2b04      	cmp	r3, #4
 8008992:	d003      	beq.n	800899c <USBH_HandleControl+0xcc>
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	2b02      	cmp	r3, #2
 8008998:	f040 8100 	bne.w	8008b9c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	220b      	movs	r2, #11
 80089a0:	761a      	strb	r2, [r3, #24]
      break;
 80089a2:	e0fb      	b.n	8008b9c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6899      	ldr	r1, [r3, #8]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	899a      	ldrh	r2, [r3, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	791b      	ldrb	r3, [r3, #4]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f93a 	bl	8008c36 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2204      	movs	r2, #4
 80089c6:	761a      	strb	r2, [r3, #24]
      break;
 80089c8:	e0f1      	b.n	8008bae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	791b      	ldrb	r3, [r3, #4]
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fc31 	bl	8009238 <USBH_LL_GetURBState>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d102      	bne.n	80089e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2209      	movs	r2, #9
 80089e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b05      	cmp	r3, #5
 80089ea:	d102      	bne.n	80089f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089ec:	2303      	movs	r3, #3
 80089ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089f0:	e0d6      	b.n	8008ba0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	f040 80d3 	bne.w	8008ba0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	220b      	movs	r2, #11
 80089fe:	761a      	strb	r2, [r3, #24]
      break;
 8008a00:	e0ce      	b.n	8008ba0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6899      	ldr	r1, [r3, #8]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	899a      	ldrh	r2, [r3, #12]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	795b      	ldrb	r3, [r3, #5]
 8008a0e:	2001      	movs	r0, #1
 8008a10:	9000      	str	r0, [sp, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f8ea 	bl	8008bec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2206      	movs	r2, #6
 8008a28:	761a      	strb	r2, [r3, #24]
      break;
 8008a2a:	e0c0      	b.n	8008bae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	795b      	ldrb	r3, [r3, #5]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fc00 	bl	8009238 <USBH_LL_GetURBState>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d103      	bne.n	8008a4a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2207      	movs	r2, #7
 8008a46:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a48:	e0ac      	b.n	8008ba4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	2b05      	cmp	r3, #5
 8008a4e:	d105      	bne.n	8008a5c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	220c      	movs	r2, #12
 8008a54:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a56:	2303      	movs	r3, #3
 8008a58:	73fb      	strb	r3, [r7, #15]
      break;
 8008a5a:	e0a3      	b.n	8008ba4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d103      	bne.n	8008a6a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2205      	movs	r2, #5
 8008a66:	761a      	strb	r2, [r3, #24]
      break;
 8008a68:	e09c      	b.n	8008ba4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	f040 8099 	bne.w	8008ba4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	220b      	movs	r2, #11
 8008a76:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a78:	2302      	movs	r3, #2
 8008a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a7c:	e092      	b.n	8008ba4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	791b      	ldrb	r3, [r3, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	2100      	movs	r1, #0
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f8d5 	bl	8008c36 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	761a      	strb	r2, [r3, #24]

      break;
 8008a9e:	e086      	b.n	8008bae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	791b      	ldrb	r3, [r3, #4]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fbc6 	bl	8009238 <USBH_LL_GetURBState>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d105      	bne.n	8008ac2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	220d      	movs	r2, #13
 8008aba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ac0:	e072      	b.n	8008ba8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d103      	bne.n	8008ad0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	220b      	movs	r2, #11
 8008acc:	761a      	strb	r2, [r3, #24]
      break;
 8008ace:	e06b      	b.n	8008ba8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	d168      	bne.n	8008ba8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8008ada:	e065      	b.n	8008ba8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	795b      	ldrb	r3, [r3, #5]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	9200      	str	r2, [sp, #0]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f87f 	bl	8008bec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	220a      	movs	r2, #10
 8008afe:	761a      	strb	r2, [r3, #24]
      break;
 8008b00:	e055      	b.n	8008bae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	795b      	ldrb	r3, [r3, #5]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fb95 	bl	8009238 <USBH_LL_GetURBState>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d105      	bne.n	8008b24 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	220d      	movs	r2, #13
 8008b20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b22:	e043      	b.n	8008bac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d103      	bne.n	8008b32 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2209      	movs	r2, #9
 8008b2e:	761a      	strb	r2, [r3, #24]
      break;
 8008b30:	e03c      	b.n	8008bac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d139      	bne.n	8008bac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	220b      	movs	r2, #11
 8008b3c:	761a      	strb	r2, [r3, #24]
      break;
 8008b3e:	e035      	b.n	8008bac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	7e5b      	ldrb	r3, [r3, #25]
 8008b44:	3301      	adds	r3, #1
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	765a      	strb	r2, [r3, #25]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	7e5b      	ldrb	r3, [r3, #25]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d806      	bhi.n	8008b62 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b60:	e025      	b.n	8008bae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b68:	2106      	movs	r1, #6
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	795b      	ldrb	r3, [r3, #5]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f90c 	bl	8008d98 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	791b      	ldrb	r3, [r3, #4]
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f906 	bl	8008d98 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b92:	2302      	movs	r3, #2
 8008b94:	73fb      	strb	r3, [r7, #15]
      break;
 8008b96:	e00a      	b.n	8008bae <USBH_HandleControl+0x2de>

    default:
      break;
 8008b98:	bf00      	nop
 8008b9a:	e008      	b.n	8008bae <USBH_HandleControl+0x2de>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e006      	b.n	8008bae <USBH_HandleControl+0x2de>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e004      	b.n	8008bae <USBH_HandleControl+0x2de>
      break;
 8008ba4:	bf00      	nop
 8008ba6:	e002      	b.n	8008bae <USBH_HandleControl+0x2de>
      break;
 8008ba8:	bf00      	nop
 8008baa:	e000      	b.n	8008bae <USBH_HandleControl+0x2de>
      break;
 8008bac:	bf00      	nop
  }

  return status;
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af04      	add	r7, sp, #16
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bc6:	79f9      	ldrb	r1, [r7, #7]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	2308      	movs	r3, #8
 8008bce:	9302      	str	r3, [sp, #8]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	9301      	str	r3, [sp, #4]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	2200      	movs	r2, #0
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 fafa 	bl	80091d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af04      	add	r7, sp, #16
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	80fb      	strh	r3, [r7, #6]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c10:	7979      	ldrb	r1, [r7, #5]
 8008c12:	7e3b      	ldrb	r3, [r7, #24]
 8008c14:	9303      	str	r3, [sp, #12]
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	9302      	str	r3, [sp, #8]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	2301      	movs	r3, #1
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	2300      	movs	r3, #0
 8008c24:	2200      	movs	r2, #0
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 fad5 	bl	80091d6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b088      	sub	sp, #32
 8008c3a:	af04      	add	r7, sp, #16
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	4611      	mov	r1, r2
 8008c42:	461a      	mov	r2, r3
 8008c44:	460b      	mov	r3, r1
 8008c46:	80fb      	strh	r3, [r7, #6]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c4c:	7979      	ldrb	r1, [r7, #5]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	9303      	str	r3, [sp, #12]
 8008c52:	88fb      	ldrh	r3, [r7, #6]
 8008c54:	9302      	str	r3, [sp, #8]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2201      	movs	r2, #1
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 fab7 	bl	80091d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c68:	2300      	movs	r3, #0

}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b088      	sub	sp, #32
 8008c76:	af04      	add	r7, sp, #16
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	461a      	mov	r2, r3
 8008c80:	460b      	mov	r3, r1
 8008c82:	80fb      	strh	r3, [r7, #6]
 8008c84:	4613      	mov	r3, r2
 8008c86:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c96:	7979      	ldrb	r1, [r7, #5]
 8008c98:	7e3b      	ldrb	r3, [r7, #24]
 8008c9a:	9303      	str	r3, [sp, #12]
 8008c9c:	88fb      	ldrh	r3, [r7, #6]
 8008c9e:	9302      	str	r3, [sp, #8]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	2302      	movs	r3, #2
 8008caa:	2200      	movs	r2, #0
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fa92 	bl	80091d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af04      	add	r7, sp, #16
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	461a      	mov	r2, r3
 8008cca:	460b      	mov	r3, r1
 8008ccc:	80fb      	strh	r3, [r7, #6]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cd2:	7979      	ldrb	r1, [r7, #5]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	9303      	str	r3, [sp, #12]
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	9302      	str	r3, [sp, #8]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	9301      	str	r3, [sp, #4]
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 fa74 	bl	80091d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af04      	add	r7, sp, #16
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	4608      	mov	r0, r1
 8008d02:	4611      	mov	r1, r2
 8008d04:	461a      	mov	r2, r3
 8008d06:	4603      	mov	r3, r0
 8008d08:	70fb      	strb	r3, [r7, #3]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	70bb      	strb	r3, [r7, #2]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d12:	7878      	ldrb	r0, [r7, #1]
 8008d14:	78ba      	ldrb	r2, [r7, #2]
 8008d16:	78f9      	ldrb	r1, [r7, #3]
 8008d18:	8b3b      	ldrh	r3, [r7, #24]
 8008d1a:	9302      	str	r3, [sp, #8]
 8008d1c:	7d3b      	ldrb	r3, [r7, #20]
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	7c3b      	ldrb	r3, [r7, #16]
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	4603      	mov	r3, r0
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fa07 	bl	800913a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa26 	bl	8009198 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f836 	bl	8008dd4 <USBH_GetFreePipe>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d6c:	89fb      	ldrh	r3, [r7, #14]
 8008d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00a      	beq.n	8008d8c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d76:	78fa      	ldrb	r2, [r7, #3]
 8008d78:	89fb      	ldrh	r3, [r7, #14]
 8008d7a:	f003 030f 	and.w	r3, r3, #15
 8008d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	33e0      	adds	r3, #224	; 0xe0
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d8c:	89fb      	ldrh	r3, [r7, #14]
 8008d8e:	b2db      	uxtb	r3, r3
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	2b0f      	cmp	r3, #15
 8008da8:	d80d      	bhi.n	8008dc6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	33e0      	adds	r3, #224	; 0xe0
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	33e0      	adds	r3, #224	; 0xe0
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	440b      	add	r3, r1
 8008dc4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
 8008de4:	e00f      	b.n	8008e06 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	33e0      	adds	r3, #224	; 0xe0
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d102      	bne.n	8008e00 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	e007      	b.n	8008e10 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	3301      	adds	r3, #1
 8008e04:	73fb      	strb	r3, [r7, #15]
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	2b0f      	cmp	r3, #15
 8008e0a:	d9ec      	bls.n	8008de6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e20:	2201      	movs	r2, #1
 8008e22:	490e      	ldr	r1, [pc, #56]	; (8008e5c <MX_USB_HOST_Init+0x40>)
 8008e24:	480e      	ldr	r0, [pc, #56]	; (8008e60 <MX_USB_HOST_Init+0x44>)
 8008e26:	f7ff fb37 	bl	8008498 <USBH_Init>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e30:	f7f8 fa4a 	bl	80012c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e34:	490b      	ldr	r1, [pc, #44]	; (8008e64 <MX_USB_HOST_Init+0x48>)
 8008e36:	480a      	ldr	r0, [pc, #40]	; (8008e60 <MX_USB_HOST_Init+0x44>)
 8008e38:	f7ff fbbc 	bl	80085b4 <USBH_RegisterClass>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e42:	f7f8 fa41 	bl	80012c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e46:	4806      	ldr	r0, [pc, #24]	; (8008e60 <MX_USB_HOST_Init+0x44>)
 8008e48:	f7ff fc40 	bl	80086cc <USBH_Start>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e52:	f7f8 fa39 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e56:	bf00      	nop
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	08008e69 	.word	0x08008e69
 8008e60:	200001dc 	.word	0x200001dc
 8008e64:	2000000c 	.word	0x2000000c

08008e68 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	d819      	bhi.n	8008eb0 <USBH_UserProcess+0x48>
 8008e7c:	a201      	add	r2, pc, #4	; (adr r2, 8008e84 <USBH_UserProcess+0x1c>)
 8008e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e82:	bf00      	nop
 8008e84:	08008eb1 	.word	0x08008eb1
 8008e88:	08008ea1 	.word	0x08008ea1
 8008e8c:	08008eb1 	.word	0x08008eb1
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008e99 	.word	0x08008e99
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008e98:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <USBH_UserProcess+0x58>)
 8008e9a:	2203      	movs	r2, #3
 8008e9c:	701a      	strb	r2, [r3, #0]
  break;
 8008e9e:	e008      	b.n	8008eb2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <USBH_UserProcess+0x58>)
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	701a      	strb	r2, [r3, #0]
  break;
 8008ea6:	e004      	b.n	8008eb2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ea8:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <USBH_UserProcess+0x58>)
 8008eaa:	2201      	movs	r2, #1
 8008eac:	701a      	strb	r2, [r3, #0]
  break;
 8008eae:	e000      	b.n	8008eb2 <USBH_UserProcess+0x4a>

  default:
  break;
 8008eb0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	200005b4 	.word	0x200005b4

08008ec4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	; 0x28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ecc:	f107 0314 	add.w	r3, r7, #20
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	605a      	str	r2, [r3, #4]
 8008ed6:	609a      	str	r2, [r3, #8]
 8008ed8:	60da      	str	r2, [r3, #12]
 8008eda:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ee4:	d147      	bne.n	8008f76 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	613b      	str	r3, [r7, #16]
 8008eea:	4b25      	ldr	r3, [pc, #148]	; (8008f80 <HAL_HCD_MspInit+0xbc>)
 8008eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eee:	4a24      	ldr	r2, [pc, #144]	; (8008f80 <HAL_HCD_MspInit+0xbc>)
 8008ef0:	f043 0301 	orr.w	r3, r3, #1
 8008ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ef6:	4b22      	ldr	r3, [pc, #136]	; (8008f80 <HAL_HCD_MspInit+0xbc>)
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	613b      	str	r3, [r7, #16]
 8008f00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f10:	f107 0314 	add.w	r3, r7, #20
 8008f14:	4619      	mov	r1, r3
 8008f16:	481b      	ldr	r0, [pc, #108]	; (8008f84 <HAL_HCD_MspInit+0xc0>)
 8008f18:	f7f8 fd26 	bl	8001968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f22:	2302      	movs	r3, #2
 8008f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f2e:	230a      	movs	r3, #10
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f32:	f107 0314 	add.w	r3, r7, #20
 8008f36:	4619      	mov	r1, r3
 8008f38:	4812      	ldr	r0, [pc, #72]	; (8008f84 <HAL_HCD_MspInit+0xc0>)
 8008f3a:	f7f8 fd15 	bl	8001968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f3e:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <HAL_HCD_MspInit+0xbc>)
 8008f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f42:	4a0f      	ldr	r2, [pc, #60]	; (8008f80 <HAL_HCD_MspInit+0xbc>)
 8008f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f48:	6353      	str	r3, [r2, #52]	; 0x34
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <HAL_HCD_MspInit+0xbc>)
 8008f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f52:	4a0b      	ldr	r2, [pc, #44]	; (8008f80 <HAL_HCD_MspInit+0xbc>)
 8008f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f58:	6453      	str	r3, [r2, #68]	; 0x44
 8008f5a:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <HAL_HCD_MspInit+0xbc>)
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f66:	2200      	movs	r2, #0
 8008f68:	2100      	movs	r1, #0
 8008f6a:	2043      	movs	r0, #67	; 0x43
 8008f6c:	f7f8 fc95 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f70:	2043      	movs	r0, #67	; 0x43
 8008f72:	f7f8 fcae 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f76:	bf00      	nop
 8008f78:	3728      	adds	r7, #40	; 0x28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	40023800 	.word	0x40023800
 8008f84:	40020000 	.word	0x40020000

08008f88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff fbb7 	bl	800870a <USBH_LL_IncTimer>
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff fbef 	bl	8008796 <USBH_LL_Connect>
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fbf8 	bl	80087c4 <USBH_LL_Disconnect>
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009006:	4618      	mov	r0, r3
 8009008:	f7ff fba9 	bl	800875e <USBH_LL_PortEnabled>
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff fba9 	bl	800877a <USBH_LL_PortDisabled>
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800903e:	2b01      	cmp	r3, #1
 8009040:	d12a      	bne.n	8009098 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009042:	4a18      	ldr	r2, [pc, #96]	; (80090a4 <USBH_LL_Init+0x74>)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a15      	ldr	r2, [pc, #84]	; (80090a4 <USBH_LL_Init+0x74>)
 800904e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009052:	4b14      	ldr	r3, [pc, #80]	; (80090a4 <USBH_LL_Init+0x74>)
 8009054:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009058:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <USBH_LL_Init+0x74>)
 800905c:	2208      	movs	r2, #8
 800905e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009060:	4b10      	ldr	r3, [pc, #64]	; (80090a4 <USBH_LL_Init+0x74>)
 8009062:	2201      	movs	r2, #1
 8009064:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009066:	4b0f      	ldr	r3, [pc, #60]	; (80090a4 <USBH_LL_Init+0x74>)
 8009068:	2200      	movs	r2, #0
 800906a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800906c:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <USBH_LL_Init+0x74>)
 800906e:	2202      	movs	r2, #2
 8009070:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009072:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <USBH_LL_Init+0x74>)
 8009074:	2200      	movs	r2, #0
 8009076:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009078:	480a      	ldr	r0, [pc, #40]	; (80090a4 <USBH_LL_Init+0x74>)
 800907a:	f7f8 fe5d 	bl	8001d38 <HAL_HCD_Init>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009084:	f7f8 f920 	bl	80012c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009088:	4806      	ldr	r0, [pc, #24]	; (80090a4 <USBH_LL_Init+0x74>)
 800908a:	f7f9 fa32 	bl	80024f2 <HAL_HCD_GetCurrentFrame>
 800908e:	4603      	mov	r3, r0
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7ff fb2a 	bl	80086ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	200005b8 	.word	0x200005b8

080090a8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090be:	4618      	mov	r0, r3
 80090c0:	f7f9 f9af 	bl	8002422 <HAL_HCD_Start>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f90e 	bl	80092ec <USBH_Get_USB_Status>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7f9 f9b7 	bl	8002468 <HAL_HCD_Stop>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	4618      	mov	r0, r3
 8009102:	f000 f8f3 	bl	80092ec <USBH_Get_USB_Status>
 8009106:	4603      	mov	r3, r0
 8009108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800910a:	7bbb      	ldrb	r3, [r7, #14]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	4611      	mov	r1, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f7f9 f9cd 	bl	80024ca <HAL_HCD_HC_GetXferCount>
 8009130:	4603      	mov	r3, r0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800913a:	b590      	push	{r4, r7, lr}
 800913c:	b089      	sub	sp, #36	; 0x24
 800913e:	af04      	add	r7, sp, #16
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	4608      	mov	r0, r1
 8009144:	4611      	mov	r1, r2
 8009146:	461a      	mov	r2, r3
 8009148:	4603      	mov	r3, r0
 800914a:	70fb      	strb	r3, [r7, #3]
 800914c:	460b      	mov	r3, r1
 800914e:	70bb      	strb	r3, [r7, #2]
 8009150:	4613      	mov	r3, r2
 8009152:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009162:	787c      	ldrb	r4, [r7, #1]
 8009164:	78ba      	ldrb	r2, [r7, #2]
 8009166:	78f9      	ldrb	r1, [r7, #3]
 8009168:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800916a:	9302      	str	r3, [sp, #8]
 800916c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	4623      	mov	r3, r4
 800917a:	f7f8 fe3f 	bl	8001dfc <HAL_HCD_HC_Init>
 800917e:	4603      	mov	r3, r0
 8009180:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	4618      	mov	r0, r3
 8009186:	f000 f8b1 	bl	80092ec <USBH_Get_USB_Status>
 800918a:	4603      	mov	r3, r0
 800918c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800918e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	bd90      	pop	{r4, r7, pc}

08009198 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091b2:	78fa      	ldrb	r2, [r7, #3]
 80091b4:	4611      	mov	r1, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7f8 feaf 	bl	8001f1a <HAL_HCD_HC_Halt>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 f892 	bl	80092ec <USBH_Get_USB_Status>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80091d6:	b590      	push	{r4, r7, lr}
 80091d8:	b089      	sub	sp, #36	; 0x24
 80091da:	af04      	add	r7, sp, #16
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	4608      	mov	r0, r1
 80091e0:	4611      	mov	r1, r2
 80091e2:	461a      	mov	r2, r3
 80091e4:	4603      	mov	r3, r0
 80091e6:	70fb      	strb	r3, [r7, #3]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70bb      	strb	r3, [r7, #2]
 80091ec:	4613      	mov	r3, r2
 80091ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80091fe:	787c      	ldrb	r4, [r7, #1]
 8009200:	78ba      	ldrb	r2, [r7, #2]
 8009202:	78f9      	ldrb	r1, [r7, #3]
 8009204:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009208:	9303      	str	r3, [sp, #12]
 800920a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800920c:	9302      	str	r3, [sp, #8]
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	4623      	mov	r3, r4
 800921a:	f7f8 fea1 	bl	8001f60 <HAL_HCD_HC_SubmitRequest>
 800921e:	4603      	mov	r3, r0
 8009220:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f861 	bl	80092ec <USBH_Get_USB_Status>
 800922a:	4603      	mov	r3, r0
 800922c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	bd90      	pop	{r4, r7, pc}

08009238 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7f9 f927 	bl	80024a2 <HAL_HCD_HC_GetURBState>
 8009254:	4603      	mov	r3, r0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009270:	2b01      	cmp	r3, #1
 8009272:	d103      	bne.n	800927c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	4618      	mov	r0, r3
 8009278:	f000 f864 	bl	8009344 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800927c:	20c8      	movs	r0, #200	; 0xc8
 800927e:	f7f8 fa0d 	bl	800169c <HAL_Delay>
  return USBH_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
 8009298:	4613      	mov	r3, r2
 800929a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	212c      	movs	r1, #44	; 0x2c
 80092aa:	fb01 f303 	mul.w	r3, r1, r3
 80092ae:	4413      	add	r3, r2
 80092b0:	333b      	adds	r3, #59	; 0x3b
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	212c      	movs	r1, #44	; 0x2c
 80092be:	fb01 f303 	mul.w	r3, r1, r3
 80092c2:	4413      	add	r3, r2
 80092c4:	3354      	adds	r3, #84	; 0x54
 80092c6:	78ba      	ldrb	r2, [r7, #2]
 80092c8:	701a      	strb	r2, [r3, #0]
 80092ca:	e008      	b.n	80092de <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	212c      	movs	r1, #44	; 0x2c
 80092d2:	fb01 f303 	mul.w	r3, r1, r3
 80092d6:	4413      	add	r3, r2
 80092d8:	3355      	adds	r3, #85	; 0x55
 80092da:	78ba      	ldrb	r2, [r7, #2]
 80092dc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d817      	bhi.n	8009330 <USBH_Get_USB_Status+0x44>
 8009300:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <USBH_Get_USB_Status+0x1c>)
 8009302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009306:	bf00      	nop
 8009308:	08009319 	.word	0x08009319
 800930c:	0800931f 	.word	0x0800931f
 8009310:	08009325 	.word	0x08009325
 8009314:	0800932b 	.word	0x0800932b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	73fb      	strb	r3, [r7, #15]
    break;
 800931c:	e00b      	b.n	8009336 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800931e:	2302      	movs	r3, #2
 8009320:	73fb      	strb	r3, [r7, #15]
    break;
 8009322:	e008      	b.n	8009336 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009324:	2301      	movs	r3, #1
 8009326:	73fb      	strb	r3, [r7, #15]
    break;
 8009328:	e005      	b.n	8009336 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800932a:	2302      	movs	r3, #2
 800932c:	73fb      	strb	r3, [r7, #15]
    break;
 800932e:	e002      	b.n	8009336 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009330:	2302      	movs	r3, #2
 8009332:	73fb      	strb	r3, [r7, #15]
    break;
 8009334:	bf00      	nop
  }
  return usb_status;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009352:	79fb      	ldrb	r3, [r7, #7]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009358:	2300      	movs	r3, #0
 800935a:	73fb      	strb	r3, [r7, #15]
 800935c:	e001      	b.n	8009362 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800935e:	2301      	movs	r3, #1
 8009360:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	461a      	mov	r2, r3
 8009366:	2101      	movs	r1, #1
 8009368:	4803      	ldr	r0, [pc, #12]	; (8009378 <MX_DriverVbusFS+0x34>)
 800936a:	f7f8 fc99 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 800936e:	bf00      	nop
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	40020800 	.word	0x40020800

0800937c <abs>:
 800937c:	2800      	cmp	r0, #0
 800937e:	bfb8      	it	lt
 8009380:	4240      	neglt	r0, r0
 8009382:	4770      	bx	lr

08009384 <__errno>:
 8009384:	4b01      	ldr	r3, [pc, #4]	; (800938c <__errno+0x8>)
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	2000002c 	.word	0x2000002c

08009390 <__libc_init_array>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	4d0d      	ldr	r5, [pc, #52]	; (80093c8 <__libc_init_array+0x38>)
 8009394:	4c0d      	ldr	r4, [pc, #52]	; (80093cc <__libc_init_array+0x3c>)
 8009396:	1b64      	subs	r4, r4, r5
 8009398:	10a4      	asrs	r4, r4, #2
 800939a:	2600      	movs	r6, #0
 800939c:	42a6      	cmp	r6, r4
 800939e:	d109      	bne.n	80093b4 <__libc_init_array+0x24>
 80093a0:	4d0b      	ldr	r5, [pc, #44]	; (80093d0 <__libc_init_array+0x40>)
 80093a2:	4c0c      	ldr	r4, [pc, #48]	; (80093d4 <__libc_init_array+0x44>)
 80093a4:	f000 f93c 	bl	8009620 <_init>
 80093a8:	1b64      	subs	r4, r4, r5
 80093aa:	10a4      	asrs	r4, r4, #2
 80093ac:	2600      	movs	r6, #0
 80093ae:	42a6      	cmp	r6, r4
 80093b0:	d105      	bne.n	80093be <__libc_init_array+0x2e>
 80093b2:	bd70      	pop	{r4, r5, r6, pc}
 80093b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b8:	4798      	blx	r3
 80093ba:	3601      	adds	r6, #1
 80093bc:	e7ee      	b.n	800939c <__libc_init_array+0xc>
 80093be:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c2:	4798      	blx	r3
 80093c4:	3601      	adds	r6, #1
 80093c6:	e7f2      	b.n	80093ae <__libc_init_array+0x1e>
 80093c8:	0800965c 	.word	0x0800965c
 80093cc:	0800965c 	.word	0x0800965c
 80093d0:	0800965c 	.word	0x0800965c
 80093d4:	08009660 	.word	0x08009660

080093d8 <malloc>:
 80093d8:	4b02      	ldr	r3, [pc, #8]	; (80093e4 <malloc+0xc>)
 80093da:	4601      	mov	r1, r0
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	f000 b88d 	b.w	80094fc <_malloc_r>
 80093e2:	bf00      	nop
 80093e4:	2000002c 	.word	0x2000002c

080093e8 <free>:
 80093e8:	4b02      	ldr	r3, [pc, #8]	; (80093f4 <free+0xc>)
 80093ea:	4601      	mov	r1, r0
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	f000 b819 	b.w	8009424 <_free_r>
 80093f2:	bf00      	nop
 80093f4:	2000002c 	.word	0x2000002c

080093f8 <memcpy>:
 80093f8:	440a      	add	r2, r1
 80093fa:	4291      	cmp	r1, r2
 80093fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009400:	d100      	bne.n	8009404 <memcpy+0xc>
 8009402:	4770      	bx	lr
 8009404:	b510      	push	{r4, lr}
 8009406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800940a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800940e:	4291      	cmp	r1, r2
 8009410:	d1f9      	bne.n	8009406 <memcpy+0xe>
 8009412:	bd10      	pop	{r4, pc}

08009414 <memset>:
 8009414:	4402      	add	r2, r0
 8009416:	4603      	mov	r3, r0
 8009418:	4293      	cmp	r3, r2
 800941a:	d100      	bne.n	800941e <memset+0xa>
 800941c:	4770      	bx	lr
 800941e:	f803 1b01 	strb.w	r1, [r3], #1
 8009422:	e7f9      	b.n	8009418 <memset+0x4>

08009424 <_free_r>:
 8009424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009426:	2900      	cmp	r1, #0
 8009428:	d044      	beq.n	80094b4 <_free_r+0x90>
 800942a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800942e:	9001      	str	r0, [sp, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f1a1 0404 	sub.w	r4, r1, #4
 8009436:	bfb8      	it	lt
 8009438:	18e4      	addlt	r4, r4, r3
 800943a:	f000 f8e3 	bl	8009604 <__malloc_lock>
 800943e:	4a1e      	ldr	r2, [pc, #120]	; (80094b8 <_free_r+0x94>)
 8009440:	9801      	ldr	r0, [sp, #4]
 8009442:	6813      	ldr	r3, [r2, #0]
 8009444:	b933      	cbnz	r3, 8009454 <_free_r+0x30>
 8009446:	6063      	str	r3, [r4, #4]
 8009448:	6014      	str	r4, [r2, #0]
 800944a:	b003      	add	sp, #12
 800944c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009450:	f000 b8de 	b.w	8009610 <__malloc_unlock>
 8009454:	42a3      	cmp	r3, r4
 8009456:	d908      	bls.n	800946a <_free_r+0x46>
 8009458:	6825      	ldr	r5, [r4, #0]
 800945a:	1961      	adds	r1, r4, r5
 800945c:	428b      	cmp	r3, r1
 800945e:	bf01      	itttt	eq
 8009460:	6819      	ldreq	r1, [r3, #0]
 8009462:	685b      	ldreq	r3, [r3, #4]
 8009464:	1949      	addeq	r1, r1, r5
 8009466:	6021      	streq	r1, [r4, #0]
 8009468:	e7ed      	b.n	8009446 <_free_r+0x22>
 800946a:	461a      	mov	r2, r3
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	b10b      	cbz	r3, 8009474 <_free_r+0x50>
 8009470:	42a3      	cmp	r3, r4
 8009472:	d9fa      	bls.n	800946a <_free_r+0x46>
 8009474:	6811      	ldr	r1, [r2, #0]
 8009476:	1855      	adds	r5, r2, r1
 8009478:	42a5      	cmp	r5, r4
 800947a:	d10b      	bne.n	8009494 <_free_r+0x70>
 800947c:	6824      	ldr	r4, [r4, #0]
 800947e:	4421      	add	r1, r4
 8009480:	1854      	adds	r4, r2, r1
 8009482:	42a3      	cmp	r3, r4
 8009484:	6011      	str	r1, [r2, #0]
 8009486:	d1e0      	bne.n	800944a <_free_r+0x26>
 8009488:	681c      	ldr	r4, [r3, #0]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	6053      	str	r3, [r2, #4]
 800948e:	4421      	add	r1, r4
 8009490:	6011      	str	r1, [r2, #0]
 8009492:	e7da      	b.n	800944a <_free_r+0x26>
 8009494:	d902      	bls.n	800949c <_free_r+0x78>
 8009496:	230c      	movs	r3, #12
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	e7d6      	b.n	800944a <_free_r+0x26>
 800949c:	6825      	ldr	r5, [r4, #0]
 800949e:	1961      	adds	r1, r4, r5
 80094a0:	428b      	cmp	r3, r1
 80094a2:	bf04      	itt	eq
 80094a4:	6819      	ldreq	r1, [r3, #0]
 80094a6:	685b      	ldreq	r3, [r3, #4]
 80094a8:	6063      	str	r3, [r4, #4]
 80094aa:	bf04      	itt	eq
 80094ac:	1949      	addeq	r1, r1, r5
 80094ae:	6021      	streq	r1, [r4, #0]
 80094b0:	6054      	str	r4, [r2, #4]
 80094b2:	e7ca      	b.n	800944a <_free_r+0x26>
 80094b4:	b003      	add	sp, #12
 80094b6:	bd30      	pop	{r4, r5, pc}
 80094b8:	200008bc 	.word	0x200008bc

080094bc <sbrk_aligned>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	4e0e      	ldr	r6, [pc, #56]	; (80094f8 <sbrk_aligned+0x3c>)
 80094c0:	460c      	mov	r4, r1
 80094c2:	6831      	ldr	r1, [r6, #0]
 80094c4:	4605      	mov	r5, r0
 80094c6:	b911      	cbnz	r1, 80094ce <sbrk_aligned+0x12>
 80094c8:	f000 f88c 	bl	80095e4 <_sbrk_r>
 80094cc:	6030      	str	r0, [r6, #0]
 80094ce:	4621      	mov	r1, r4
 80094d0:	4628      	mov	r0, r5
 80094d2:	f000 f887 	bl	80095e4 <_sbrk_r>
 80094d6:	1c43      	adds	r3, r0, #1
 80094d8:	d00a      	beq.n	80094f0 <sbrk_aligned+0x34>
 80094da:	1cc4      	adds	r4, r0, #3
 80094dc:	f024 0403 	bic.w	r4, r4, #3
 80094e0:	42a0      	cmp	r0, r4
 80094e2:	d007      	beq.n	80094f4 <sbrk_aligned+0x38>
 80094e4:	1a21      	subs	r1, r4, r0
 80094e6:	4628      	mov	r0, r5
 80094e8:	f000 f87c 	bl	80095e4 <_sbrk_r>
 80094ec:	3001      	adds	r0, #1
 80094ee:	d101      	bne.n	80094f4 <sbrk_aligned+0x38>
 80094f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80094f4:	4620      	mov	r0, r4
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	200008c0 	.word	0x200008c0

080094fc <_malloc_r>:
 80094fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009500:	1ccd      	adds	r5, r1, #3
 8009502:	f025 0503 	bic.w	r5, r5, #3
 8009506:	3508      	adds	r5, #8
 8009508:	2d0c      	cmp	r5, #12
 800950a:	bf38      	it	cc
 800950c:	250c      	movcc	r5, #12
 800950e:	2d00      	cmp	r5, #0
 8009510:	4607      	mov	r7, r0
 8009512:	db01      	blt.n	8009518 <_malloc_r+0x1c>
 8009514:	42a9      	cmp	r1, r5
 8009516:	d905      	bls.n	8009524 <_malloc_r+0x28>
 8009518:	230c      	movs	r3, #12
 800951a:	603b      	str	r3, [r7, #0]
 800951c:	2600      	movs	r6, #0
 800951e:	4630      	mov	r0, r6
 8009520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009524:	4e2e      	ldr	r6, [pc, #184]	; (80095e0 <_malloc_r+0xe4>)
 8009526:	f000 f86d 	bl	8009604 <__malloc_lock>
 800952a:	6833      	ldr	r3, [r6, #0]
 800952c:	461c      	mov	r4, r3
 800952e:	bb34      	cbnz	r4, 800957e <_malloc_r+0x82>
 8009530:	4629      	mov	r1, r5
 8009532:	4638      	mov	r0, r7
 8009534:	f7ff ffc2 	bl	80094bc <sbrk_aligned>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	4604      	mov	r4, r0
 800953c:	d14d      	bne.n	80095da <_malloc_r+0xde>
 800953e:	6834      	ldr	r4, [r6, #0]
 8009540:	4626      	mov	r6, r4
 8009542:	2e00      	cmp	r6, #0
 8009544:	d140      	bne.n	80095c8 <_malloc_r+0xcc>
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	4631      	mov	r1, r6
 800954a:	4638      	mov	r0, r7
 800954c:	eb04 0803 	add.w	r8, r4, r3
 8009550:	f000 f848 	bl	80095e4 <_sbrk_r>
 8009554:	4580      	cmp	r8, r0
 8009556:	d13a      	bne.n	80095ce <_malloc_r+0xd2>
 8009558:	6821      	ldr	r1, [r4, #0]
 800955a:	3503      	adds	r5, #3
 800955c:	1a6d      	subs	r5, r5, r1
 800955e:	f025 0503 	bic.w	r5, r5, #3
 8009562:	3508      	adds	r5, #8
 8009564:	2d0c      	cmp	r5, #12
 8009566:	bf38      	it	cc
 8009568:	250c      	movcc	r5, #12
 800956a:	4629      	mov	r1, r5
 800956c:	4638      	mov	r0, r7
 800956e:	f7ff ffa5 	bl	80094bc <sbrk_aligned>
 8009572:	3001      	adds	r0, #1
 8009574:	d02b      	beq.n	80095ce <_malloc_r+0xd2>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	442b      	add	r3, r5
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	e00e      	b.n	800959c <_malloc_r+0xa0>
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	1b52      	subs	r2, r2, r5
 8009582:	d41e      	bmi.n	80095c2 <_malloc_r+0xc6>
 8009584:	2a0b      	cmp	r2, #11
 8009586:	d916      	bls.n	80095b6 <_malloc_r+0xba>
 8009588:	1961      	adds	r1, r4, r5
 800958a:	42a3      	cmp	r3, r4
 800958c:	6025      	str	r5, [r4, #0]
 800958e:	bf18      	it	ne
 8009590:	6059      	strne	r1, [r3, #4]
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	bf08      	it	eq
 8009596:	6031      	streq	r1, [r6, #0]
 8009598:	5162      	str	r2, [r4, r5]
 800959a:	604b      	str	r3, [r1, #4]
 800959c:	4638      	mov	r0, r7
 800959e:	f104 060b 	add.w	r6, r4, #11
 80095a2:	f000 f835 	bl	8009610 <__malloc_unlock>
 80095a6:	f026 0607 	bic.w	r6, r6, #7
 80095aa:	1d23      	adds	r3, r4, #4
 80095ac:	1af2      	subs	r2, r6, r3
 80095ae:	d0b6      	beq.n	800951e <_malloc_r+0x22>
 80095b0:	1b9b      	subs	r3, r3, r6
 80095b2:	50a3      	str	r3, [r4, r2]
 80095b4:	e7b3      	b.n	800951e <_malloc_r+0x22>
 80095b6:	6862      	ldr	r2, [r4, #4]
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	bf0c      	ite	eq
 80095bc:	6032      	streq	r2, [r6, #0]
 80095be:	605a      	strne	r2, [r3, #4]
 80095c0:	e7ec      	b.n	800959c <_malloc_r+0xa0>
 80095c2:	4623      	mov	r3, r4
 80095c4:	6864      	ldr	r4, [r4, #4]
 80095c6:	e7b2      	b.n	800952e <_malloc_r+0x32>
 80095c8:	4634      	mov	r4, r6
 80095ca:	6876      	ldr	r6, [r6, #4]
 80095cc:	e7b9      	b.n	8009542 <_malloc_r+0x46>
 80095ce:	230c      	movs	r3, #12
 80095d0:	603b      	str	r3, [r7, #0]
 80095d2:	4638      	mov	r0, r7
 80095d4:	f000 f81c 	bl	8009610 <__malloc_unlock>
 80095d8:	e7a1      	b.n	800951e <_malloc_r+0x22>
 80095da:	6025      	str	r5, [r4, #0]
 80095dc:	e7de      	b.n	800959c <_malloc_r+0xa0>
 80095de:	bf00      	nop
 80095e0:	200008bc 	.word	0x200008bc

080095e4 <_sbrk_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d06      	ldr	r5, [pc, #24]	; (8009600 <_sbrk_r+0x1c>)
 80095e8:	2300      	movs	r3, #0
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7f7 ff70 	bl	80014d4 <_sbrk>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_sbrk_r+0x1a>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_sbrk_r+0x1a>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	200008c4 	.word	0x200008c4

08009604 <__malloc_lock>:
 8009604:	4801      	ldr	r0, [pc, #4]	; (800960c <__malloc_lock+0x8>)
 8009606:	f000 b809 	b.w	800961c <__retarget_lock_acquire_recursive>
 800960a:	bf00      	nop
 800960c:	200008c8 	.word	0x200008c8

08009610 <__malloc_unlock>:
 8009610:	4801      	ldr	r0, [pc, #4]	; (8009618 <__malloc_unlock+0x8>)
 8009612:	f000 b804 	b.w	800961e <__retarget_lock_release_recursive>
 8009616:	bf00      	nop
 8009618:	200008c8 	.word	0x200008c8

0800961c <__retarget_lock_acquire_recursive>:
 800961c:	4770      	bx	lr

0800961e <__retarget_lock_release_recursive>:
 800961e:	4770      	bx	lr

08009620 <_init>:
 8009620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009622:	bf00      	nop
 8009624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009626:	bc08      	pop	{r3}
 8009628:	469e      	mov	lr, r3
 800962a:	4770      	bx	lr

0800962c <_fini>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	bf00      	nop
 8009630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009632:	bc08      	pop	{r3}
 8009634:	469e      	mov	lr, r3
 8009636:	4770      	bx	lr
